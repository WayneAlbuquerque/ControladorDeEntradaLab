
ControleDeEntrada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800138  00800138  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000829  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000741  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  9e:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led>:
char comando;
int i = 0;

void led()
{
	if(comando == 'L')
  a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <comando>
  aa:	8c 34       	cpi	r24, 0x4C	; 76
  ac:	09 f4       	brne	.+2      	; 0xb0 <led+0xa>
	{
		set_bit(PORTB, PORTB5);
  ae:	2d 9a       	sbi	0x05, 5	; 5
	}
	if(comando == 'D')
  b0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <comando>
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	09 f4       	brne	.+2      	; 0xba <led+0x14>
	{
		clr_bit(PORTB, PORTB5);
  b8:	2d 98       	cbi	0x05, 5	; 5
	}
	if(comando == 'P')
  ba:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <comando>
  be:	80 35       	cpi	r24, 0x50	; 80
  c0:	a1 f4       	brne	.+40     	; 0xea <led+0x44>
	{
		
		set_bit(PORTB, PORTB5);
  c2:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led+0x2e>
  d4:	00 00       	nop
		_delay_ms(1000);
		clr_bit(PORTB, PORTB5);
  d6:	2d 98       	cbi	0x05, 5	; 5
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	83 ed       	ldi	r24, 0xD3	; 211
  dc:	90 e3       	ldi	r25, 0x30	; 48
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <led+0x38>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <led+0x42>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <USART_Transmit>:
	
}

void USART_Transmit( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)));
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	95 ff       	sbrs	r25, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <USART_Transmit+0x4>
	UDR0 = data;	
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fa:	08 95       	ret

000000fc <MensagemInicial>:
}

void MensagemInicial(){
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	e8 97       	sbiw	r28, 0x38	; 56
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	char msg[] = " BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n";
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	e0 e0       	ldi	r30, 0x00	; 0
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	de 01       	movw	r26, r28
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	01 90       	ld	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	8a 95       	dec	r24
 124:	e1 f7       	brne	.-8      	; 0x11e <MensagemInicial+0x22>
	while(i != strlen(msg)){	
 126:	8e 01       	movw	r16, r28
 128:	0f 5f       	subi	r16, 0xFF	; 255
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	0d c0       	rjmp	.+26     	; 0x148 <MensagemInicial+0x4c>
		USART_Transmit(msg[i++]);
 12e:	9c 01       	movw	r18, r24
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <__data_end+0x1>
 138:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <__data_end>
 13c:	f8 01       	movw	r30, r16
 13e:	e8 0f       	add	r30, r24
 140:	f9 1f       	adc	r31, r25
 142:	80 81       	ld	r24, Z
 144:	0e 94 76 00 	call	0xec	; 0xec <USART_Transmit>
	UDR0 = data;	
}

void MensagemInicial(){
	char msg[] = " BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n";
	while(i != strlen(msg)){	
 148:	f8 01       	movw	r30, r16
 14a:	01 90       	ld	r0, Z+
 14c:	00 20       	and	r0, r0
 14e:	e9 f7       	brne	.-6      	; 0x14a <MensagemInicial+0x4e>
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	e0 1b       	sub	r30, r16
 154:	f1 0b       	sbc	r31, r17
 156:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 15a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
 15e:	e8 17       	cp	r30, r24
 160:	f9 07       	cpc	r31, r25
 162:	29 f7       	brne	.-54     	; 0x12e <MensagemInicial+0x32>
		USART_Transmit(msg[i++]);
	}
	i = 0;
 164:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
 168:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>

}
 16c:	e8 96       	adiw	r28, 0x38	; 56
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <main>:

int main(void)
{
	DDRB = 0xFF;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 186:	15 b8       	out	0x05, r1	; 5
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 188:	e1 ec       	ldi	r30, 0xC1	; 193
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	80 83       	st	Z, r24
	UCSR0C = (1 << USBS0) | (1 << UCSZ00) | (1 << UCSZ01);
 190:	8e e0       	ldi	r24, 0x0E	; 14
 192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0H = (BAUD_PRESCALE >> 8);
 196:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
 19a:	87 e6       	ldi	r24, 0x67	; 103
 19c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXCIE0);
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
	
	sei();
 1a6:	78 94       	sei

	MensagemInicial();
 1a8:	0e 94 7e 00 	call	0xfc	; 0xfc <MensagemInicial>
	
	for(;;)
	{
		led();
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <led>
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <main+0x2a>

000001b2 <__vector_18>:
    }
	
}

ISR(USART_RX_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
	char ReceivedByte = UDR0;
 1c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(ReceivedByte == 'L' || ReceivedByte == 'D' || ReceivedByte == 'P')
 1c4:	98 2f       	mov	r25, r24
 1c6:	97 7f       	andi	r25, 0xF7	; 247
 1c8:	94 34       	cpi	r25, 0x44	; 68
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <__vector_18+0x1e>
 1cc:	80 35       	cpi	r24, 0x50	; 80
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <__vector_18+0x22>
	{
		comando = ReceivedByte;
 1d0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <comando>
	}
	
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
