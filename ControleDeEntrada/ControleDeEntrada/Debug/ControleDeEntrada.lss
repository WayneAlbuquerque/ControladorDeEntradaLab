
ControleDeEntrada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800100  000012a0  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800350  00800350  00001584  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001202  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b8  00000000  00000000  00003106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093f  00000000  00000000  0000424f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ea       	ldi	r30, 0xA0	; 160
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3e       	cpi	r26, 0xE9	; 233
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4c 04 	call	0x898	; 0x898 <main>
      9e:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Transmit>:



void USART_Transmit( unsigned char data ) // transmite um caracter para o serial do Atmega328p
{
	while ( !(UCSR0A & (1<<UDRE0)));
      a6:	e0 ec       	ldi	r30, 0xC0	; 192
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	90 81       	ld	r25, Z
      ac:	95 ff       	sbrs	r25, 5
      ae:	fd cf       	rjmp	.-6      	; 0xaa <USART_Transmit+0x4>
	UDR0 = data;	
      b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      b4:	08 95       	ret

000000b6 <print>:
}

void print(char dados[100]){ // Funcao que escreve uma string no terminal de ate 100 caracteres
      b6:	ef 92       	push	r14
      b8:	ff 92       	push	r15
      ba:	0f 93       	push	r16
      bc:	1f 93       	push	r17
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	8c 01       	movw	r16, r24
      c4:	7c 01       	movw	r14, r24
	int i = 0;
      c6:	c0 e0       	ldi	r28, 0x00	; 0
      c8:	d0 e0       	ldi	r29, 0x00	; 0
	while(i != strlen(dados)){
      ca:	06 c0       	rjmp	.+12     	; 0xd8 <print+0x22>
		USART_Transmit(dados[i++]);
      cc:	21 96       	adiw	r28, 0x01	; 1
      ce:	f7 01       	movw	r30, r14
      d0:	81 91       	ld	r24, Z+
      d2:	7f 01       	movw	r14, r30
      d4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
	UDR0 = data;	
}

void print(char dados[100]){ // Funcao que escreve uma string no terminal de ate 100 caracteres
	int i = 0;
	while(i != strlen(dados)){
      d8:	f8 01       	movw	r30, r16
      da:	01 90       	ld	r0, Z+
      dc:	00 20       	and	r0, r0
      de:	e9 f7       	brne	.-6      	; 0xda <print+0x24>
      e0:	31 97       	sbiw	r30, 0x01	; 1
      e2:	e0 1b       	sub	r30, r16
      e4:	f1 0b       	sbc	r31, r17
      e6:	ec 17       	cp	r30, r28
      e8:	fd 07       	cpc	r31, r29
      ea:	81 f7       	brne	.-32     	; 0xcc <print+0x16>
		USART_Transmit(dados[i++]);
	}
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	1f 91       	pop	r17
      f2:	0f 91       	pop	r16
      f4:	ff 90       	pop	r15
      f6:	ef 90       	pop	r14
      f8:	08 95       	ret

000000fa <TestaSenha>:

int TestaSenha(char senha[10]){ //Funcao para comparar a senha digitada com o banco de senhas
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	8c 01       	movw	r16, r24
	senha[strlen(senha)-1] = '\0';
     114:	fc 01       	movw	r30, r24
     116:	01 90       	ld	r0, Z+
     118:	00 20       	and	r0, r0
     11a:	e9 f7       	brne	.-6      	; 0x116 <TestaSenha+0x1c>
     11c:	32 97       	sbiw	r30, 0x02	; 2
     11e:	10 82       	st	Z, r1
	while(1){
		switch(FS){
			case 0:
				for(int c = 0; c < nsenhas; c++){
     120:	e0 90 77 03 	lds	r14, 0x0377	; 0x800377 <nsenhas>
     124:	f0 90 78 03 	lds	r15, 0x0378	; 0x800378 <nsenhas+0x1>
     128:	e7 01       	movw	r28, r14
     12a:	cc 0f       	add	r28, r28
     12c:	dd 1f       	adc	r29, r29
     12e:	cc 0f       	add	r28, r28
     130:	dd 1f       	adc	r29, r29
     132:	cc 0f       	add	r28, r28
     134:	dd 1f       	adc	r29, r29
     136:	ce 19       	sub	r28, r14
     138:	df 09       	sbc	r29, r15
     13a:	c7 58       	subi	r28, 0x87	; 135
     13c:	dc 4f       	sbci	r29, 0xFC	; 252
						FP=0;
					}
					FS = 0;
					return 2;
				}
				FS = 2;
     13e:	68 94       	set
     140:	cc 24       	eor	r12, r12
     142:	c1 f8       	bld	r12, 1
     144:	d1 2c       	mov	r13, r1
							FP=0;
							FS = 0;
							return 1;
					}
				}
				FS = 1;
     146:	aa 24       	eor	r10, r10
     148:	a3 94       	inc	r10
     14a:	b1 2c       	mov	r11, r1
}

int TestaSenha(char senha[10]){ //Funcao para comparar a senha digitada com o banco de senhas
	senha[strlen(senha)-1] = '\0';
	while(1){
		switch(FS){
     14c:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <FS>
     150:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <FS+0x1>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	91 05       	cpc	r25, r1
     158:	69 f1       	breq	.+90     	; 0x1b4 <TestaSenha+0xba>
     15a:	82 30       	cpi	r24, 0x02	; 2
     15c:	91 05       	cpc	r25, r1
     15e:	09 f4       	brne	.+2      	; 0x162 <TestaSenha+0x68>
     160:	48 c0       	rjmp	.+144    	; 0x1f2 <TestaSenha+0xf8>
     162:	00 97       	sbiw	r24, 0x00	; 0
     164:	b9 f7       	brne	.-18     	; 0x154 <TestaSenha+0x5a>
			case 0:
				for(int c = 0; c < nsenhas; c++){
     166:	1e 14       	cp	r1, r14
     168:	1f 04       	cpc	r1, r15
     16a:	fc f4       	brge	.+62     	; 0x1aa <TestaSenha+0xb0>
     16c:	0f 2e       	mov	r0, r31
     16e:	f9 e7       	ldi	r31, 0x79	; 121
     170:	8f 2e       	mov	r8, r31
     172:	f3 e0       	ldi	r31, 0x03	; 3
     174:	9f 2e       	mov	r9, r31
     176:	f0 2d       	mov	r31, r0
					if(strcmp(senha,senhas[c]) == 0){	// Testa se a senha digitada e uma do banco de senhas
     178:	b4 01       	movw	r22, r8
     17a:	c8 01       	movw	r24, r16
     17c:	0e 94 54 06 	call	0xca8	; 0xca8 <strcmp>
     180:	89 2b       	or	r24, r25
     182:	69 f4       	brne	.+26     	; 0x19e <TestaSenha+0xa4>
							strcpy(buffer,""); // Limpa o buffer
     184:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
							FP=0;
     188:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     18c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
							FS = 0;
     190:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <FS+0x1>
     194:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <FS>
							return 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	36 c0       	rjmp	.+108    	; 0x20a <TestaSenha+0x110>
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	88 0e       	add	r8, r24
     1a2:	91 1c       	adc	r9, r1
int TestaSenha(char senha[10]){ //Funcao para comparar a senha digitada com o banco de senhas
	senha[strlen(senha)-1] = '\0';
	while(1){
		switch(FS){
			case 0:
				for(int c = 0; c < nsenhas; c++){
     1a4:	8c 16       	cp	r8, r28
     1a6:	9d 06       	cpc	r9, r29
     1a8:	39 f7       	brne	.-50     	; 0x178 <TestaSenha+0x7e>
							FP=0;
							FS = 0;
							return 1;
					}
				}
				FS = 1;
     1aa:	b0 92 53 03 	sts	0x0353, r11	; 0x800353 <FS+0x1>
     1ae:	a0 92 52 03 	sts	0x0352, r10	; 0x800352 <FS>
				//print("Senha incorreta1");
				break;
     1b2:	cc cf       	rjmp	.-104    	; 0x14c <TestaSenha+0x52>
			case 1:
				if(strcmp(senha,"171294") == 0){ // Testa se e a senha mestre
     1b4:	6e e5       	ldi	r22, 0x5E	; 94
     1b6:	71 e0       	ldi	r23, 0x01	; 1
     1b8:	c8 01       	movw	r24, r16
     1ba:	0e 94 54 06 	call	0xca8	; 0xca8 <strcmp>
     1be:	89 2b       	or	r24, r25
     1c0:	99 f4       	brne	.+38     	; 0x1e8 <TestaSenha+0xee>
					strcpy(buffer,""); // Limpa o buffer
     1c2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
					if(Est!=2){
     1c6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <Est>
     1ca:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <Est+0x1>
     1ce:	02 97       	sbiw	r24, 0x02	; 2
     1d0:	21 f0       	breq	.+8      	; 0x1da <TestaSenha+0xe0>
						FP=0;
     1d2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     1d6:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
					}
					FS = 0;
     1da:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <FS+0x1>
     1de:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <FS>
					return 2;
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	11 c0       	rjmp	.+34     	; 0x20a <TestaSenha+0x110>
				}
				FS = 2;
     1e8:	d0 92 53 03 	sts	0x0353, r13	; 0x800353 <FS+0x1>
     1ec:	c0 92 52 03 	sts	0x0352, r12	; 0x800352 <FS>
				//print("Senha incorreta2");
				break;
     1f0:	ad cf       	rjmp	.-166    	; 0x14c <TestaSenha+0x52>
			case 2:
				//print("Senha incorreta");
				strcpy(buffer,""); // Limpa o buffer
     1f2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
				//if(Est!=0){
				FP=0;
     1f6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     1fa:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
				FS = 0;
     1fe:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <FS+0x1>
     202:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <FS>
				//}
				return 0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}
	}
	return 0;
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	9f 90       	pop	r9
     220:	8f 90       	pop	r8
     222:	08 95       	ret

00000224 <Mensagem>:

void Mensagem(){ // Escreve mensagens
     224:	cf 92       	push	r12
     226:	df 92       	push	r13
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	c4 56       	subi	r28, 0x64	; 100
     23a:	d1 09       	sbc	r29, r1
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
	char msg[100];
	if(Est==0){
     246:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <Est>
     24a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <Est+0x1>
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	81 f4       	brne	.+32     	; 0x272 <Mensagem+0x4e>
		strcpy(msg,"\r\n     BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n");
     252:	8e e3       	ldi	r24, 0x3E	; 62
     254:	e5 e6       	ldi	r30, 0x65	; 101
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	de 01       	movw	r26, r28
     25a:	11 96       	adiw	r26, 0x01	; 1
     25c:	01 90       	ld	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	8a 95       	dec	r24
     262:	e1 f7       	brne	.-8      	; 0x25c <Mensagem+0x38>
     264:	ce 01       	movw	r24, r28
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	6c 01       	movw	r12, r24
		}
	}
	return 0;
}

void Mensagem(){ // Escreve mensagens
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	10 e0       	ldi	r17, 0x00	; 0
		strcpy(msg,"\r\nInforme o ID que perdera o acesso:\r\n");
	}else if(Est == 5){
		strcpy(msg,"\r\n[3] - Log de Entradasa Senha \r\n");
	}
	int i = 0;
	while(i != strlen(msg)){
     26e:	7c 01       	movw	r14, r24
     270:	51 c0       	rjmp	.+162    	; 0x314 <Mensagem+0xf0>

void Mensagem(){ // Escreve mensagens
	char msg[100];
	if(Est==0){
		strcpy(msg,"\r\n     BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n");
	}else if(Est == 2){
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	91 05       	cpc	r25, r1
     276:	51 f4       	brne	.+20     	; 0x28c <Mensagem+0x68>
		strcpy(msg,"\r\n[1] - Cadastra senha \r\n[2] - Deleta Senha \r\n[3] - Log de Entradas \r\n[4] - Sair \r\n");
     278:	84 e5       	ldi	r24, 0x54	; 84
     27a:	e3 ea       	ldi	r30, 0xA3	; 163
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	de 01       	movw	r26, r28
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	01 90       	ld	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	8a 95       	dec	r24
     288:	e1 f7       	brne	.-8      	; 0x282 <Mensagem+0x5e>
     28a:	ec cf       	rjmp	.-40     	; 0x264 <Mensagem+0x40>
	}else if(Est == 3){
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	91 05       	cpc	r25, r1
     290:	01 f5       	brne	.+64     	; 0x2d2 <Mensagem+0xae>
		sprintf(msg,"Cadastro, seu ID e %s \r\nNova senha(ex 3578951#): ",userIDs[nsenhas]);
     292:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <nsenhas>
     296:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <nsenhas+0x1>
     29a:	9c 01       	movw	r18, r24
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	8e 5f       	subi	r24, 0xFE	; 254
     2aa:	9e 4f       	sbci	r25, 0xFE	; 254
     2ac:	9f 93       	push	r25
     2ae:	8f 93       	push	r24
     2b0:	87 ef       	ldi	r24, 0xF7	; 247
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	9f 93       	push	r25
     2b6:	8f 93       	push	r24
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <sprintf>
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	c9 cf       	rjmp	.-110    	; 0x264 <Mensagem+0x40>
	}else if(Est == 4){
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	91 05       	cpc	r25, r1
     2d6:	51 f4       	brne	.+20     	; 0x2ec <Mensagem+0xc8>
		strcpy(msg,"\r\nInforme o ID que perdera o acesso:\r\n");
     2d8:	87 e2       	ldi	r24, 0x27	; 39
     2da:	e9 e2       	ldi	r30, 0x29	; 41
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
     2de:	de 01       	movw	r26, r28
     2e0:	11 96       	adiw	r26, 0x01	; 1
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <Mensagem+0xbe>
     2ea:	bc cf       	rjmp	.-136    	; 0x264 <Mensagem+0x40>
	}else if(Est == 5){
     2ec:	05 97       	sbiw	r24, 0x05	; 5
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <Mensagem+0xce>
     2f0:	b9 cf       	rjmp	.-142    	; 0x264 <Mensagem+0x40>
		strcpy(msg,"\r\n[3] - Log de Entradasa Senha \r\n");
     2f2:	82 e2       	ldi	r24, 0x22	; 34
     2f4:	e0 e5       	ldi	r30, 0x50	; 80
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	de 01       	movw	r26, r28
     2fa:	11 96       	adiw	r26, 0x01	; 1
     2fc:	01 90       	ld	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	8a 95       	dec	r24
     302:	e1 f7       	brne	.-8      	; 0x2fc <Mensagem+0xd8>
     304:	af cf       	rjmp	.-162    	; 0x264 <Mensagem+0x40>
	}
	int i = 0;
	while(i != strlen(msg)){
		USART_Transmit(msg[i++]);
     306:	0f 5f       	subi	r16, 0xFF	; 255
     308:	1f 4f       	sbci	r17, 0xFF	; 255
     30a:	f6 01       	movw	r30, r12
     30c:	81 91       	ld	r24, Z+
     30e:	6f 01       	movw	r12, r30
     310:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit>
		strcpy(msg,"\r\nInforme o ID que perdera o acesso:\r\n");
	}else if(Est == 5){
		strcpy(msg,"\r\n[3] - Log de Entradasa Senha \r\n");
	}
	int i = 0;
	while(i != strlen(msg)){
     314:	f7 01       	movw	r30, r14
     316:	01 90       	ld	r0, Z+
     318:	00 20       	and	r0, r0
     31a:	e9 f7       	brne	.-6      	; 0x316 <Mensagem+0xf2>
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	ee 19       	sub	r30, r14
     320:	ff 09       	sbc	r31, r15
     322:	e0 17       	cp	r30, r16
     324:	f1 07       	cpc	r31, r17
     326:	79 f7       	brne	.-34     	; 0x306 <Mensagem+0xe2>
		USART_Transmit(msg[i++]);
	}
	FP = 1;	
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <FP+0x1>
     330:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <FP>
}
     334:	cc 59       	subi	r28, 0x9C	; 156
     336:	df 4f       	sbci	r29, 0xFF	; 255
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	08 95       	ret

00000354 <Master>:

int Master(char comando[10]){	
	if(comando[0] == '1'){
     354:	fc 01       	movw	r30, r24
     356:	80 81       	ld	r24, Z
     358:	81 33       	cpi	r24, 0x31	; 49
     35a:	49 f4       	brne	.+18     	; 0x36e <Master+0x1a>
		strcpy(buffer,"");
     35c:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
		FP= 0;
     360:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     364:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
		return 3;
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	08 95       	ret
	}else if (comando[0] == '2'){
     36e:	82 33       	cpi	r24, 0x32	; 50
     370:	49 f4       	brne	.+18     	; 0x384 <Master+0x30>
		strcpy(buffer,"");
     372:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
		FP= 0;
     376:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     37a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
		return 4;
     37e:	84 e0       	ldi	r24, 0x04	; 4
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	08 95       	ret
	}else if (comando[0] == '3'){
     384:	83 33       	cpi	r24, 0x33	; 51
     386:	49 f4       	brne	.+18     	; 0x39a <Master+0x46>
		strcpy(buffer,"");
     388:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
		FP= 0;
     38c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     390:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
		return 5;
     394:	85 e0       	ldi	r24, 0x05	; 5
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret
	}else if (comando[0]=='4'){
     39a:	84 33       	cpi	r24, 0x34	; 52
     39c:	49 f4       	brne	.+18     	; 0x3b0 <Master+0x5c>
		strcpy(buffer,"");
     39e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
		FP= 0;
     3a2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     3a6:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
		return 0;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	08 95       	ret
	}
	strcpy(buffer,"");
     3b0:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
	FP= 0;
     3b4:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     3b8:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
	return 0;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
}
     3c0:	08 95       	ret

000003c2 <cadastro>:

int cadastro(char senha[10]){
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
	switch(FC){
     3c6:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <FC>
     3ca:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <FC+0x1>
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	21 f0       	breq	.+8      	; 0x3dc <cadastro+0x1a>
     3d4:	21 30       	cpi	r18, 0x01	; 1
     3d6:	31 05       	cpc	r19, r1
     3d8:	89 f1       	breq	.+98     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3da:	7a c0       	rjmp	.+244    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		case 0:
			if(strlen(senha)!=7){
     3dc:	fc 01       	movw	r30, r24
     3de:	01 90       	ld	r0, Z+
     3e0:	00 20       	and	r0, r0
     3e2:	e9 f7       	brne	.-6      	; 0x3de <cadastro+0x1c>
     3e4:	9f 01       	movw	r18, r30
     3e6:	28 50       	subi	r18, 0x08	; 8
     3e8:	31 09       	sbc	r19, r1
     3ea:	28 17       	cp	r18, r24
     3ec:	39 07       	cpc	r19, r25
     3ee:	49 f0       	breq	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				print("a senha deve ter 7 digitos terminando com #");
     3f0:	82 e7       	ldi	r24, 0x72	; 114
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
				strcpy(buffer,"");
     3f8:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
				FC = 0;
				FP = 0;
			}				
			break;
	}
	return 3;	
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	6c c0       	rjmp	.+216    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		case 0:
			if(strlen(senha)!=7){
				print("a senha deve ter 7 digitos terminando com #");
				strcpy(buffer,"");
				}else{
				strcpy(ConfirmaSenha,buffer);
     402:	69 e6       	ldi	r22, 0x69	; 105
     404:	73 e0       	ldi	r23, 0x03	; 3
     406:	8f e5       	ldi	r24, 0x5F	; 95
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
				strcpy(buffer,"");
     40e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
				print("Confirma senha");
     412:	8e e9       	ldi	r24, 0x9E	; 158
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
				print(ConfirmaSenha);
     41a:	8f e5       	ldi	r24, 0x5F	; 95
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
				print("? \r\n[1]- sim, [2] - nao\r\n");
     422:	8d ea       	ldi	r24, 0xAD	; 173
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
				FC = 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <FC+0x1>
     432:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <FC>
				FC = 0;
				FP = 0;
			}				
			break;
	}
	return 3;	
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	4f c0       	rjmp	.+158    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				print("? \r\n[1]- sim, [2] - nao\r\n");
				FC = 1;
			}
			break;
		case 1:
			if(buffer[0] == '1'){
     43c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <buffer>
     440:	81 33       	cpi	r24, 0x31	; 49
     442:	a9 f5       	brne	.+106    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
				ConfirmaSenha[strlen(ConfirmaSenha)-1] = '\0';
     444:	cf e5       	ldi	r28, 0x5F	; 95
     446:	d3 e0       	ldi	r29, 0x03	; 3
     448:	fe 01       	movw	r30, r28
     44a:	01 90       	ld	r0, Z+
     44c:	00 20       	and	r0, r0
     44e:	e9 f7       	brne	.-6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     450:	32 97       	sbiw	r30, 0x02	; 2
     452:	10 82       	st	Z, r1
				strcpy(senhas[nsenhas],ConfirmaSenha);
     454:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <nsenhas>
     458:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <nsenhas+0x1>
     45c:	c9 01       	movw	r24, r18
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	be 01       	movw	r22, r28
     470:	87 58       	subi	r24, 0x87	; 135
     472:	9c 4f       	sbci	r25, 0xFC	; 252
     474:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
				print("\r\nSenha cadastrada com sucesso");
     478:	87 ec       	ldi	r24, 0xC7	; 199
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
				nsenhas++;
     480:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <nsenhas>
     484:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <nsenhas+0x1>
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <nsenhas+0x1>
     48e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <nsenhas>
				strcpy(buffer,"");
     492:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
				strcpy(ConfirmaSenha,"");
     496:	18 82       	st	Y, r1
				FC = 0;
     498:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <FC+0x1>
     49c:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <FC>
				FP = 0;
     4a0:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     4a4:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
				return 2;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	16 c0       	rjmp	.+44     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			}else if(buffer[0] == '2'){
     4ae:	82 33       	cpi	r24, 0x32	; 50
     4b0:	91 f4       	brne	.+36     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				strcpy(buffer,"");
     4b2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
				strcpy(ConfirmaSenha,"");
     4b6:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <ConfirmaSenha>
				FC = 0;
     4ba:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <FC+0x1>
     4be:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <FC>
				FP = 0;
     4c2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     4c6:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
			}				
			break;
	}
	return 3;	
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	90 e0       	ldi	r25, 0x00	; 0
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <Sort>:

void Sort(){
     4e0:	4f 92       	push	r4
     4e2:	5f 92       	push	r5
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	c4 5d       	subi	r28, 0xD4	; 212
     506:	d1 09       	sbc	r29, r1
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	6c 01       	movw	r12, r24
     518:	4e 01       	movw	r8, r28
     51a:	91 e7       	ldi	r25, 0x71	; 113
     51c:	89 0e       	add	r8, r25
     51e:	91 1c       	adc	r9, r1
     520:	56 01       	movw	r10, r12
	char senhasTmp[16][7];
	char userIDsTmp[16][5];
	int j = 0;
	char info[20];
	for (int i = 0; i<15; i++){
     522:	e1 2c       	mov	r14, r1
     524:	f1 2c       	mov	r15, r1
}

void Sort(){
	char senhasTmp[16][7];
	char userIDsTmp[16][5];
	int j = 0;
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	10 e0       	ldi	r17, 0x00	; 0
	char info[20];
	for (int i = 0; i<15; i++){
		if(i!=indexDeletID){
     52a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     52e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     532:	8e 15       	cp	r24, r14
     534:	9f 05       	cpc	r25, r15
     536:	e9 f0       	breq	.+58     	; 0x572 <Sort+0x92>
			strcpy(senhasTmp[i],senhas[j]);
     538:	b8 01       	movw	r22, r16
     53a:	66 0f       	add	r22, r22
     53c:	77 1f       	adc	r23, r23
     53e:	66 0f       	add	r22, r22
     540:	77 1f       	adc	r23, r23
     542:	66 0f       	add	r22, r22
     544:	77 1f       	adc	r23, r23
     546:	60 1b       	sub	r22, r16
     548:	71 0b       	sbc	r23, r17
     54a:	67 58       	subi	r22, 0x87	; 135
     54c:	7c 4f       	sbci	r23, 0xFC	; 252
     54e:	c5 01       	movw	r24, r10
     550:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
			strcpy(userIDsTmp[i],userIDs[j]);
     554:	b8 01       	movw	r22, r16
     556:	66 0f       	add	r22, r22
     558:	77 1f       	adc	r23, r23
     55a:	66 0f       	add	r22, r22
     55c:	77 1f       	adc	r23, r23
     55e:	60 0f       	add	r22, r16
     560:	71 1f       	adc	r23, r17
     562:	6e 5f       	subi	r22, 0xFE	; 254
     564:	7e 4f       	sbci	r23, 0xFE	; 254
     566:	c4 01       	movw	r24, r8
     568:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
			j++;
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	20 c0       	rjmp	.+64     	; 0x5b2 <Sort+0xd2>
			}else{
			j++;
     572:	38 01       	movw	r6, r16
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	68 1a       	sub	r6, r24
     578:	78 0a       	sbc	r7, r24
			strcpy(senhasTmp[i],senhas[j]);
     57a:	b3 01       	movw	r22, r6
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	66 0f       	add	r22, r22
     582:	77 1f       	adc	r23, r23
     584:	66 0f       	add	r22, r22
     586:	77 1f       	adc	r23, r23
     588:	66 19       	sub	r22, r6
     58a:	77 09       	sbc	r23, r7
     58c:	67 58       	subi	r22, 0x87	; 135
     58e:	7c 4f       	sbci	r23, 0xFC	; 252
     590:	c5 01       	movw	r24, r10
     592:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
			strcpy(userIDsTmp[i],userIDs[j]);
     596:	b3 01       	movw	r22, r6
     598:	66 0f       	add	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	66 0f       	add	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	66 0d       	add	r22, r6
     5a2:	77 1d       	adc	r23, r7
     5a4:	6e 5f       	subi	r22, 0xFE	; 254
     5a6:	7e 4f       	sbci	r23, 0xFE	; 254
     5a8:	c4 01       	movw	r24, r8
     5aa:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
			j++;
     5ae:	0e 5f       	subi	r16, 0xFE	; 254
     5b0:	1f 4f       	sbci	r17, 0xFF	; 255
void Sort(){
	char senhasTmp[16][7];
	char userIDsTmp[16][5];
	int j = 0;
	char info[20];
	for (int i = 0; i<15; i++){
     5b2:	9f ef       	ldi	r25, 0xFF	; 255
     5b4:	e9 1a       	sub	r14, r25
     5b6:	f9 0a       	sbc	r15, r25
     5b8:	87 e0       	ldi	r24, 0x07	; 7
     5ba:	a8 0e       	add	r10, r24
     5bc:	b1 1c       	adc	r11, r1
     5be:	95 e0       	ldi	r25, 0x05	; 5
     5c0:	89 0e       	add	r8, r25
     5c2:	91 1c       	adc	r9, r1
     5c4:	8f e0       	ldi	r24, 0x0F	; 15
     5c6:	e8 16       	cp	r14, r24
     5c8:	f1 04       	cpc	r15, r1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <Sort+0xee>
     5cc:	ae cf       	rjmp	.-164    	; 0x52a <Sort+0x4a>
			strcpy(senhasTmp[i],senhas[j]);
			strcpy(userIDsTmp[i],userIDs[j]);
			j++;
		}
	}
	strcpy(senhasTmp[15],"");
     5ce:	ab 96       	adiw	r28, 0x2b	; 43
     5d0:	1f ae       	std	Y+63, r1	; 0x3f
     5d2:	ab 97       	sbiw	r28, 0x2b	; 43
	strcpy(userIDsTmp[15],userIDs[indexDeletID]);
     5d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5dc:	bc 01       	movw	r22, r24
     5de:	66 0f       	add	r22, r22
     5e0:	77 1f       	adc	r23, r23
     5e2:	66 0f       	add	r22, r22
     5e4:	77 1f       	adc	r23, r23
     5e6:	68 0f       	add	r22, r24
     5e8:	79 1f       	adc	r23, r25
     5ea:	6e 5f       	subi	r22, 0xFE	; 254
     5ec:	7e 4f       	sbci	r23, 0xFE	; 254
     5ee:	ce 01       	movw	r24, r28
     5f0:	84 54       	subi	r24, 0x44	; 68
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
     5f8:	09 e7       	ldi	r16, 0x79	; 121
     5fa:	13 e0       	ldi	r17, 0x03	; 3
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f9 ee       	ldi	r31, 0xE9	; 233
     600:	6f 2e       	mov	r6, r31
     602:	f3 e0       	ldi	r31, 0x03	; 3
     604:	7f 2e       	mov	r7, r31
     606:	f0 2d       	mov	r31, r0
     608:	e1 2c       	mov	r14, r1
     60a:	f1 2c       	mov	r15, r1

	for(int i = 0;i<16;i++){
		strcpy(senhas[i],senhasTmp[i]);
		strcpy(userIDs[i],userIDsTmp[i]);
		sprintf(info,"ID: %s - Senha: %s\r\n",userIDs[i],senhas[i]);
     60c:	0f 2e       	mov	r0, r31
     60e:	f6 ee       	ldi	r31, 0xE6	; 230
     610:	4f 2e       	mov	r4, r31
     612:	f2 e0       	ldi	r31, 0x02	; 2
     614:	5f 2e       	mov	r5, r31
     616:	f0 2d       	mov	r31, r0
     618:	4e 01       	movw	r8, r28
     61a:	91 ec       	ldi	r25, 0xC1	; 193
     61c:	89 0e       	add	r8, r25
     61e:	91 1c       	adc	r9, r1
	}
	strcpy(senhasTmp[15],"");
	strcpy(userIDsTmp[15],userIDs[indexDeletID]);

	for(int i = 0;i<16;i++){
		strcpy(senhas[i],senhasTmp[i]);
     620:	b6 01       	movw	r22, r12
     622:	80 2f       	mov	r24, r16
     624:	91 2f       	mov	r25, r17
     626:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
     62a:	c7 01       	movw	r24, r14
     62c:	8e 5f       	subi	r24, 0xFE	; 254
     62e:	9e 4f       	sbci	r25, 0xFE	; 254
     630:	5c 01       	movw	r10, r24
		strcpy(userIDs[i],userIDsTmp[i]);
     632:	61 e7       	ldi	r22, 0x71	; 113
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	6c 0f       	add	r22, r28
     638:	7d 1f       	adc	r23, r29
     63a:	6e 0d       	add	r22, r14
     63c:	7f 1d       	adc	r23, r15
     63e:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
		sprintf(info,"ID: %s - Senha: %s\r\n",userIDs[i],senhas[i]);
     642:	1f 93       	push	r17
     644:	0f 93       	push	r16
     646:	bf 92       	push	r11
     648:	af 92       	push	r10
     64a:	5f 92       	push	r5
     64c:	4f 92       	push	r4
     64e:	9f 92       	push	r9
     650:	8f 92       	push	r8
     652:	0e 94 64 06 	call	0xcc8	; 0xcc8 <sprintf>
		print(info);
     656:	c4 01       	movw	r24, r8
     658:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
     65c:	09 5f       	subi	r16, 0xF9	; 249
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	97 e0       	ldi	r25, 0x07	; 7
     662:	c9 0e       	add	r12, r25
     664:	d1 1c       	adc	r13, r1
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	e8 0e       	add	r14, r24
     66a:	f1 1c       	adc	r15, r1
		}
	}
	strcpy(senhasTmp[15],"");
	strcpy(userIDsTmp[15],userIDs[indexDeletID]);

	for(int i = 0;i<16;i++){
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	06 15       	cp	r16, r6
     678:	17 05       	cpc	r17, r7
     67a:	91 f6       	brne	.-92     	; 0x620 <Sort+0x140>
		strcpy(senhas[i],senhasTmp[i]);
		strcpy(userIDs[i],userIDsTmp[i]);
		sprintf(info,"ID: %s - Senha: %s\r\n",userIDs[i],senhas[i]);
		print(info);
	}
	nsenhas--;
     67c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <nsenhas>
     680:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <nsenhas+0x1>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <nsenhas+0x1>
     68a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <nsenhas>
	print("Teste sort \r\n");
     68e:	8b ef       	ldi	r24, 0xFB	; 251
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
}
     696:	cc 52       	subi	r28, 0x2C	; 44
     698:	df 4f       	sbci	r29, 0xFF	; 255
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	9f 90       	pop	r9
     6ba:	8f 90       	pop	r8
     6bc:	7f 90       	pop	r7
     6be:	6f 90       	pop	r6
     6c0:	5f 90       	pop	r5
     6c2:	4f 90       	pop	r4
     6c4:	08 95       	ret

000006c6 <Deletar>:

int Deletar(char ID[10]){
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
	strcpy(DeletID,ID);
     6d0:	bc 01       	movw	r22, r24
     6d2:	8a e5       	ldi	r24, 0x5A	; 90
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	0e 94 5d 06 	call	0xcba	; 0xcba <strcpy>
	DeletID[strlen(DeletID)-1] = '\0';
     6da:	ea e5       	ldi	r30, 0x5A	; 90
     6dc:	f3 e0       	ldi	r31, 0x03	; 3
     6de:	01 90       	ld	r0, Z+
     6e0:	00 20       	and	r0, r0
     6e2:	e9 f7       	brne	.-6      	; 0x6de <Deletar+0x18>
     6e4:	32 97       	sbiw	r30, 0x02	; 2
     6e6:	10 82       	st	Z, r1
	switch(FD){
     6e8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__data_end>
     6ec:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__data_end+0x1>
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	21 f0       	breq	.+8      	; 0x6fc <Deletar+0x36>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	09 f4       	brne	.+2      	; 0x6fa <Deletar+0x34>
     6f8:	68 c0       	rjmp	.+208    	; 0x7ca <Deletar+0x104>
     6fa:	8d c0       	rjmp	.+282    	; 0x816 <Deletar+0x150>
		case 0:
		if(strlen(ID)!=5){
     6fc:	fe 01       	movw	r30, r28
     6fe:	01 90       	ld	r0, Z+
     700:	00 20       	and	r0, r0
     702:	e9 f7       	brne	.-6      	; 0x6fe <Deletar+0x38>
     704:	cf 01       	movw	r24, r30
     706:	06 97       	sbiw	r24, 0x06	; 6
     708:	8c 17       	cp	r24, r28
     70a:	9d 07       	cpc	r25, r29
     70c:	39 f0       	breq	.+14     	; 0x71c <Deletar+0x56>
			print("o ID deve ter 5 digitos terminando com #");
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
			strcpy(buffer,"");
     716:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
     71a:	15 c0       	rjmp	.+42     	; 0x746 <Deletar+0x80>
     71c:	02 e0       	ldi	r16, 0x02	; 2
     71e:	11 e0       	ldi	r17, 0x01	; 1
int Deletar(char ID[10]){
	strcpy(DeletID,ID);
	DeletID[strlen(DeletID)-1] = '\0';
	switch(FD){
		case 0:
		if(strlen(ID)!=5){
     720:	c0 e0       	ldi	r28, 0x00	; 0
     722:	d0 e0       	ldi	r29, 0x00	; 0
			print("o ID deve ter 5 digitos terminando com #");
			strcpy(buffer,"");
		}else{
			for(int c = 0; c < 16; c++){
				if(strcmp(DeletID,userIDs[c]) == 0){	// Testa se a senha digitada e uma do banco de senhas
     724:	b8 01       	movw	r22, r16
     726:	8a e5       	ldi	r24, 0x5A	; 90
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 54 06 	call	0xca8	; 0xca8 <strcmp>
     72e:	89 2b       	or	r24, r25
     730:	21 f4       	brne	.+8      	; 0x73a <Deletar+0x74>
					//strcpy(buffer,""); // Limpa o buffer
					indexDeletID = c;
     732:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     736:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
		case 0:
		if(strlen(ID)!=5){
			print("o ID deve ter 5 digitos terminando com #");
			strcpy(buffer,"");
		}else{
			for(int c = 0; c < 16; c++){
     73a:	21 96       	adiw	r28, 0x01	; 1
     73c:	0b 5f       	subi	r16, 0xFB	; 251
     73e:	1f 4f       	sbci	r17, 0xFF	; 255
     740:	c0 31       	cpi	r28, 0x10	; 16
     742:	d1 05       	cpc	r29, r1
     744:	79 f7       	brne	.-34     	; 0x724 <Deletar+0x5e>
					indexDeletID = c;
					//FS = 0;
				}
			}
		}
		if(strcmp(senhas[indexDeletID],"")==0||strcmp(buffer,"")==0){
     746:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     74a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     74e:	fc 01       	movw	r30, r24
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	e8 1b       	sub	r30, r24
     75e:	f9 0b       	sbc	r31, r25
     760:	e7 58       	subi	r30, 0x87	; 135
     762:	fc 4f       	sbci	r31, 0xFC	; 252
     764:	80 81       	ld	r24, Z
     766:	88 23       	and	r24, r24
     768:	21 f0       	breq	.+8      	; 0x772 <Deletar+0xac>
     76a:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <buffer>
     76e:	81 11       	cpse	r24, r1
     770:	15 c0       	rjmp	.+42     	; 0x79c <Deletar+0xd6>
			print("Id sem Cadastro");
     772:	82 e3       	ldi	r24, 0x32	; 50
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
			indexDeletID = -1;
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	9f ef       	ldi	r25, 0xFF	; 255
     77e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     782:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			strcpy(DeletID,"");
     786:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <DeletID>
			strcpy(buffer,"");
     78a:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
			FP=0;
     78e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     792:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
			return 2;
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	42 c0       	rjmp	.+132    	; 0x820 <Deletar+0x15a>
		}else{
			//strcpy(ConfirmaSenha,buffer);
			strcpy(buffer,"");
     79c:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
			print("Confirma ID ");
     7a0:	82 e4       	ldi	r24, 0x42	; 66
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
			print(DeletID);
     7a8:	8a e5       	ldi	r24, 0x5A	; 90
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
			print("? \r\n[1]- sim, [2] - nao\r\n");
     7b0:	8d ea       	ldi	r24, 0xAD	; 173
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
			FD = 1;	
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <__data_end+0x1>
     7c0:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <__data_end>
			FD = 0;
			FP = 0;
		}
		break;
	}
	return 4;
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	90 e0       	ldi	r25, 0x00	; 0
			print("Confirma ID ");
			print(DeletID);
			print("? \r\n[1]- sim, [2] - nao\r\n");
			FD = 1;	
		}	
		break;
     7c8:	2b c0       	rjmp	.+86     	; 0x820 <Deletar+0x15a>
		case 1:
		if(buffer[0] == '1'){
     7ca:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <buffer>
     7ce:	81 33       	cpi	r24, 0x31	; 49
     7d0:	89 f4       	brne	.+34     	; 0x7f4 <Deletar+0x12e>
			/*ConfirmaSenha[strlen(ConfirmaSenha)-1] = '\0';
			strcpy(senhas[nsenhas],ConfirmaSenha);
			print("\r\nSenha cadastrada com sucesso");
			nsenhas++;*/
			Sort();
     7d2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Sort>
			strcpy(buffer,"");
     7d6:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
			strcpy(DeletID,"");
     7da:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <DeletID>
			FD = 0;
     7de:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <__data_end+0x1>
     7e2:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <__data_end>
			FP = 0;
     7e6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     7ea:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
			return 2;
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	16 c0       	rjmp	.+44     	; 0x820 <Deletar+0x15a>
			}else if(buffer[0] == '2'){
     7f4:	82 33       	cpi	r24, 0x32	; 50
     7f6:	91 f4       	brne	.+36     	; 0x81c <Deletar+0x156>
			strcpy(buffer,"");
     7f8:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <buffer>
			strcpy(DeletID,"");
     7fc:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <DeletID>
			FD = 0;
     800:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <__data_end+0x1>
     804:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <__data_end>
			FP = 0;
     808:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     80c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
		}
		break;
	}
	return 4;
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	05 c0       	rjmp	.+10     	; 0x820 <Deletar+0x15a>
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 c0       	rjmp	.+4      	; 0x820 <Deletar+0x15a>
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	90 e0       	ldi	r25, 0x00	; 0
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <varrer>:



void varrer(){ //funcao para varrer ligando e desligando os pinos do teclado
	p1 = 0; 
     82a:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <p1+0x1>
     82e:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <p1>
	set_bit(PORTB,PB3); //Liga Porta PB3
     832:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     834:	8f e3       	ldi	r24, 0x3F	; 63
     836:	9c e9       	ldi	r25, 0x9C	; 156
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <varrer+0xe>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <varrer+0x14>
     83e:	00 00       	nop
	_delay_ms(10);
	clr_bit(PORTB,PB3); //Desliga Porta PB3
     840:	2b 98       	cbi	0x05, 3	; 5
	p1 = 1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <p1+0x1>
     84a:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <p1>
	set_bit(PORTB,PB4); //Liga Porta PB4
     84e:	2c 9a       	sbi	0x05, 4	; 5
     850:	8f e3       	ldi	r24, 0x3F	; 63
     852:	9c e9       	ldi	r25, 0x9C	; 156
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <varrer+0x2a>
     858:	00 c0       	rjmp	.+0      	; 0x85a <varrer+0x30>
     85a:	00 00       	nop
	_delay_ms(10);
	clr_bit(PORTB,PB4); //Desliga Porta PB4
     85c:	2c 98       	cbi	0x05, 4	; 5
	p1 = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <p1+0x1>
     866:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <p1>
	set_bit(PORTB,PB5); //Liga Porta PB5
     86a:	2d 9a       	sbi	0x05, 5	; 5
     86c:	8f e3       	ldi	r24, 0x3F	; 63
     86e:	9c e9       	ldi	r25, 0x9C	; 156
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <varrer+0x46>
     874:	00 c0       	rjmp	.+0      	; 0x876 <varrer+0x4c>
     876:	00 00       	nop
	_delay_ms(10);
	clr_bit(PORTB,PB5); //Desliga Porta PB5
     878:	2d 98       	cbi	0x05, 5	; 5
	p1 = 3;
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <p1+0x1>
     882:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <p1>
	set_bit(PORTC,PC0); //Liga Porta PC0
     886:	40 9a       	sbi	0x08, 0	; 8
     888:	8f e3       	ldi	r24, 0x3F	; 63
     88a:	9c e9       	ldi	r25, 0x9C	; 156
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <varrer+0x62>
     890:	00 c0       	rjmp	.+0      	; 0x892 <varrer+0x68>
     892:	00 00       	nop
	_delay_ms(10);
	clr_bit(PORTC,PC0); //Desliga Porta PC0
     894:	40 98       	cbi	0x08, 0	; 8
     896:	08 95       	ret

00000898 <main>:
}

int main(void)
{
	DDRB = 0b0000111; // seta no registrador de direcao os pinos de saida como entrada e os pinos de entrada como saida
     898:	87 e0       	ldi	r24, 0x07	; 7
     89a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000001;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b1111000; // habilita pull ups e pull downs necessarios 
     8a0:	98 e7       	ldi	r25, 0x78	; 120
     8a2:	95 b9       	out	0x05, r25	; 5
	PORTC = 0b00000000;
     8a4:	18 b8       	out	0x08, r1	; 8

	DDRB = 0b11111000; // Configura as direcoes reais de direcao dos pinos no registrador direcional
     8a6:	98 ef       	ldi	r25, 0xF8	; 248
     8a8:	94 b9       	out	0x04, r25	; 4
	DDRC = 0b00000001;
     8aa:	87 b9       	out	0x07, r24	; 7

	PCICR = (1<<PCIE0);	// habilita o barramento b para interrupcoes externas
     8ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1<<PCINT0); // define quais pinos serao esperadas as interrupcoes externas
     8b0:	eb e6       	ldi	r30, 0x6B	; 107
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	81 60       	ori	r24, 0x01	; 1
     8b8:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     8ba:	80 81       	ld	r24, Z
     8bc:	82 60       	ori	r24, 0x02	; 2
     8be:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
     8c0:	80 81       	ld	r24, Z
     8c2:	84 60       	ori	r24, 0x04	; 4
     8c4:	80 83       	st	Z, r24


	UCSR0B = (1 << RXEN0) | (1 << TXEN0); 
     8c6:	e1 ec       	ldi	r30, 0xC1	; 193
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	80 83       	st	Z, r24
	UCSR0C = (1 << USBS0) | (1 << UCSZ00) | (1 << UCSZ01);
     8ce:	8e e0       	ldi	r24, 0x0E	; 14
     8d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0H = (BAUD_PRESCALE >> 8);
     8d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
     8d8:	87 e6       	ldi	r24, 0x67	; 103
     8da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXCIE0);
     8de:	80 81       	ld	r24, Z
     8e0:	80 68       	ori	r24, 0x80	; 128
     8e2:	80 83       	st	Z, r24
	
	sei();
     8e4:	78 94       	sei

	Mensagem();	
     8e6:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
			case Configuracao:
					//print(ops);
					if(FP!=1){
						Mensagem();
					}
					if(strlen(buffer)>0){
     8ea:	c9 e6       	ldi	r28, 0x69	; 105
     8ec:	d3 e0       	ldi	r29, 0x03	; 3
			break;
			case LogDeEntradas:
				if(FP!=1){
					Mensagem();
				}
				Est = 2;
     8ee:	02 e0       	ldi	r16, 0x02	; 2
     8f0:	10 e0       	ldi	r17, 0x00	; 0

	Mensagem();	

	for(;;){

		switch(Est){
     8f2:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <Est>
     8f6:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <Est+0x1>
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	91 05       	cpc	r25, r1
     8fe:	e9 f1       	breq	.+122    	; 0x97a <__stack+0x7b>
     900:	2c f4       	brge	.+10     	; 0x90c <__stack+0xd>
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	69 f0       	breq	.+26     	; 0x920 <__stack+0x21>
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	21 f1       	breq	.+72     	; 0x952 <__stack+0x53>
     90a:	97 c0       	rjmp	.+302    	; 0xa3a <__stack+0x13b>
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	91 05       	cpc	r25, r1
     910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
     912:	65 c0       	rjmp	.+202    	; 0x9de <__stack+0xdf>
     914:	0c f4       	brge	.+2      	; 0x918 <__stack+0x19>
     916:	45 c0       	rjmp	.+138    	; 0x9a2 <__stack+0xa3>
     918:	05 97       	sbiw	r24, 0x05	; 5
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	7e c0       	rjmp	.+252    	; 0xa1a <__stack+0x11b>
     91e:	8d c0       	rjmp	.+282    	; 0xa3a <__stack+0x13b>
			case Aguarda: //Aguarda senha
				if(FP!=1){
     920:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <FP>
     924:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <FP+0x1>
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	11 f0       	breq	.+4      	; 0x930 <__stack+0x31>
					Mensagem();
     92c:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
				}
				if(buffer[strlen(buffer)-1]==35){ // Testa se o buffer tem o caracter finalizador
     930:	fe 01       	movw	r30, r28
     932:	01 90       	ld	r0, Z+
     934:	00 20       	and	r0, r0
     936:	e9 f7       	brne	.-6      	; 0x932 <__stack+0x33>
     938:	32 97       	sbiw	r30, 0x02	; 2
     93a:	80 81       	ld	r24, Z
     93c:	83 32       	cpi	r24, 0x23	; 35
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0x43>
     940:	7c c0       	rjmp	.+248    	; 0xa3a <__stack+0x13b>
					Est = TestaSenha(buffer); // Atribui o proximo estado do sistema					
     942:	ce 01       	movw	r24, r28
     944:	0e 94 7d 00 	call	0xfa	; 0xfa <TestaSenha>
     948:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <Est+0x1>
     94c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <Est>
     950:	74 c0       	rjmp	.+232    	; 0xa3a <__stack+0x13b>

	Mensagem();	

	for(;;){

		switch(Est){
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	90 e0       	ldi	r25, 0x00	; 0
					Est = TestaSenha(buffer); // Atribui o proximo estado do sistema					
				}
			break;
			case Liberacao:
					for(int t = 0; t < 6; t++){ //liga o led durante 6 segundos
						set_bit(PORTB, PORTB7);
     956:	2f 9a       	sbi	0x05, 7	; 5
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	33 ed       	ldi	r19, 0xD3	; 211
     95c:	40 e3       	ldi	r20, 0x30	; 48
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	30 40       	sbci	r19, 0x00	; 0
     962:	40 40       	sbci	r20, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <__stack+0x5f>
     966:	00 c0       	rjmp	.+0      	; 0x968 <__stack+0x69>
     968:	00 00       	nop
     96a:	01 97       	sbiw	r24, 0x01	; 1
				if(buffer[strlen(buffer)-1]==35){ // Testa se o buffer tem o caracter finalizador
					Est = TestaSenha(buffer); // Atribui o proximo estado do sistema					
				}
			break;
			case Liberacao:
					for(int t = 0; t < 6; t++){ //liga o led durante 6 segundos
     96c:	a1 f7       	brne	.-24     	; 0x956 <__stack+0x57>
						set_bit(PORTB, PORTB7);
						_delay_ms(1000);
					}
					clr_bit(PORTB, PORTB7);
     96e:	2f 98       	cbi	0x05, 7	; 5
					//MensagemInicial();
					Est = 0; // Retorna ao esta Aguarda
     970:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <Est+0x1>
     974:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <Est>

			break;
     978:	60 c0       	rjmp	.+192    	; 0xa3a <__stack+0x13b>
			case Configuracao:
					//print(ops);
					if(FP!=1){
     97a:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <FP>
     97e:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <FP+0x1>
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	11 f0       	breq	.+4      	; 0x98a <__stack+0x8b>
						Mensagem();
     986:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
					}
					if(strlen(buffer)>0){
     98a:	88 81       	ld	r24, Y
     98c:	88 23       	and	r24, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
     990:	54 c0       	rjmp	.+168    	; 0xa3a <__stack+0x13b>
						//print(buffer);
						Est = Master(buffer); // Retorna ao esta Aguarda
     992:	ce 01       	movw	r24, r28
     994:	0e 94 aa 01 	call	0x354	; 0x354 <Master>
     998:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <Est+0x1>
     99c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <Est>
     9a0:	4c c0       	rjmp	.+152    	; 0xa3a <__stack+0x13b>
					}
			break;
			case Cadastro:
				if(FP!=1){
     9a2:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <FP>
     9a6:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <FP+0x1>
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <__stack+0xb3>
					Mensagem();
     9ae:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
				}
				if(buffer[strlen(buffer)-1]==35||FC == 1){
     9b2:	fe 01       	movw	r30, r28
     9b4:	01 90       	ld	r0, Z+
     9b6:	00 20       	and	r0, r0
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <__stack+0xb5>
     9ba:	32 97       	sbiw	r30, 0x02	; 2
     9bc:	80 81       	ld	r24, Z
     9be:	83 32       	cpi	r24, 0x23	; 35
     9c0:	31 f0       	breq	.+12     	; 0x9ce <__stack+0xcf>
     9c2:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <FC>
     9c6:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <FC+0x1>
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	b1 f5       	brne	.+108    	; 0xa3a <__stack+0x13b>
					Est = cadastro(buffer);
     9ce:	ce 01       	movw	r24, r28
     9d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <cadastro>
     9d4:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <Est+0x1>
     9d8:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <Est>
     9dc:	2e c0       	rjmp	.+92     	; 0xa3a <__stack+0x13b>
					//FP = 0;
				}
			break;
			case Deleta:
				if(FP!=1){
     9de:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <FP>
     9e2:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <FP+0x1>
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	11 f0       	breq	.+4      	; 0x9ee <__stack+0xef>
					Mensagem();
     9ea:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
				}
				if(buffer[strlen(buffer)-1]==35||FD == 1){
     9ee:	fe 01       	movw	r30, r28
     9f0:	01 90       	ld	r0, Z+
     9f2:	00 20       	and	r0, r0
     9f4:	e9 f7       	brne	.-6      	; 0x9f0 <__stack+0xf1>
     9f6:	32 97       	sbiw	r30, 0x02	; 2
     9f8:	80 81       	ld	r24, Z
     9fa:	83 32       	cpi	r24, 0x23	; 35
     9fc:	31 f0       	breq	.+12     	; 0xa0a <__stack+0x10b>
     9fe:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__data_end>
     a02:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__data_end+0x1>
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	c1 f4       	brne	.+48     	; 0xa3a <__stack+0x13b>
					Est = Deletar(buffer);
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <Deletar>
     a10:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <Est+0x1>
     a14:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <Est>
     a18:	10 c0       	rjmp	.+32     	; 0xa3a <__stack+0x13b>
					//FP = 0;
				}
			break;
			case LogDeEntradas:
				if(FP!=1){
     a1a:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <FP>
     a1e:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <FP+0x1>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	11 f0       	breq	.+4      	; 0xa2a <__stack+0x12b>
					Mensagem();
     a26:	0e 94 12 01 	call	0x224	; 0x224 <Mensagem>
				}
				Est = 2;
     a2a:	10 93 59 03 	sts	0x0359, r17	; 0x800359 <Est+0x1>
     a2e:	00 93 58 03 	sts	0x0358, r16	; 0x800358 <Est>
				FP = 0;
     a32:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <FP+0x1>
     a36:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <FP>
			break;
		}
		varrer();
     a3a:	0e 94 15 04 	call	0x82a	; 0x82a <varrer>
	}
     a3e:	59 cf       	rjmp	.-334    	; 0x8f2 <main+0x5a>

00000a40 <__vector_18>:

}

ISR(USART_RX_vect){ // rotina quando ocorre a interrupcao na serial
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	2f 93       	push	r18
     a4c:	3f 93       	push	r19
     a4e:	4f 93       	push	r20
     a50:	5f 93       	push	r21
     a52:	6f 93       	push	r22
     a54:	7f 93       	push	r23
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	ef 93       	push	r30
     a60:	ff 93       	push	r31
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	00 d0       	rcall	.+0      	; 0xa68 <__vector_18+0x28>
     a68:	1f 92       	push	r1
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	char ReceivedByte = UDR0;
     a6e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	char str[3];
	if(ReceivedByte){ // Testa se a variavel tem um valor se tem entra na condicao
     a72:	88 23       	and	r24, r24
     a74:	b1 f0       	breq	.+44     	; 0xaa2 <__vector_18+0x62>
		if(ReceivedByte == 13){
     a76:	8d 30       	cpi	r24, 0x0D	; 13
     a78:	59 f4       	brne	.+22     	; 0xa90 <__vector_18+0x50>
			str[0] = 35;          //Alimenta String com o sinal de fim
     a7a:	83 e2       	ldi	r24, 0x23	; 35
     a7c:	89 83       	std	Y+1, r24	; 0x01
			str[1] = '\0';		   //com o caracter lido
     a7e:	1a 82       	std	Y+2, r1	; 0x02
			strcat(buffer,str);    // concatena str no buffer
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	89 e6       	ldi	r24, 0x69	; 105
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 49 06 	call	0xc92	; 0xc92 <strcat>
     a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__vector_18+0x62>
		}else{
			str[0] = ReceivedByte; //Alimenta a String com a letura da serial
     a90:	89 83       	std	Y+1, r24	; 0x01
			str[1] = '\0';		   //com o caracter lido
     a92:	1a 82       	std	Y+2, r1	; 0x02
			strcat(buffer,str);    // concatena str no buffer
     a94:	be 01       	movw	r22, r28
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	89 e6       	ldi	r24, 0x69	; 105
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	0e 94 49 06 	call	0xc92	; 0xc92 <strcat>
		}	
	}		
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_3>:

ISR(PCINT0_vect){ // rotina quando corre interrupcao pelo teclado
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <__vector_3+0x28>
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	char str[3];
	if (rd_bit(PINB,PINB0)){ // testa se a interrupcao foi feita no pino 0 do barramento b
     afc:	18 9b       	sbis	0x03, 0	; 3
     afe:	39 c0       	rjmp	.+114    	; 0xb72 <__vector_3+0xa4>
		p2 = 0;
     b00:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <p2+0x1>
     b04:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <p2>
		str[0] = teclado[p1][p2]; // salva o valor da tecla na string auxiliar
     b08:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     b0c:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     b10:	fc 01       	movw	r30, r24
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	8e 0f       	add	r24, r30
     b18:	9f 1f       	adc	r25, r31
     b1a:	fc 01       	movw	r30, r24
     b1c:	ee 5a       	subi	r30, 0xAE	; 174
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	80 81       	ld	r24, Z
     b22:	89 83       	std	Y+1, r24	; 0x01
		str[1] = '\0';
     b24:	1a 82       	std	Y+2, r1	; 0x02
		print(str);	// escreve na serial o valor da string
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		if(teclado[p1][p2]==35){
     b2e:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     b32:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     b36:	9c 01       	movw	r18, r24
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	8e 5a       	subi	r24, 0xAE	; 174
     b42:	9e 4f       	sbci	r25, 0xFE	; 254
     b44:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <p2>
     b48:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <p2+0x1>
     b4c:	fc 01       	movw	r30, r24
     b4e:	e2 0f       	add	r30, r18
     b50:	f3 1f       	adc	r31, r19
     b52:	80 81       	ld	r24, Z
     b54:	83 32       	cpi	r24, 0x23	; 35
     b56:	21 f4       	brne	.+8      	; 0xb60 <__vector_3+0x92>
			print(" \r\n");
     b58:	8f e9       	ldi	r24, 0x9F	; 159
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		}
		strcat(buffer,str);
     b60:	be 01       	movw	r22, r28
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	89 e6       	ldi	r24, 0x69	; 105
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 49 06 	call	0xc92	; 0xc92 <strcat>
		while(rd_bit(PINB,PINB0)); // para o fluxo do codigo ate que o botao seja liberado
     b6e:	18 99       	sbic	0x03, 0	; 3
     b70:	fe cf       	rjmp	.-4      	; 0xb6e <__vector_3+0xa0>
	}

	if (rd_bit(PINB,PINB1)){ // testa se a interrupcao foi feita no pino 1 do barramento b
     b72:	19 9b       	sbis	0x03, 1	; 3
     b74:	3b c0       	rjmp	.+118    	; 0xbec <__vector_3+0x11e>
		p2 = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <p2+0x1>
     b7e:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <p2>
		str[0] = teclado[p1][p2]; // salva o valor da tecla na string auxiliar
     b82:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     b86:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     b8a:	fc 01       	movw	r30, r24
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	8e 0f       	add	r24, r30
     b92:	9f 1f       	adc	r25, r31
     b94:	fc 01       	movw	r30, r24
     b96:	ee 5a       	subi	r30, 0xAE	; 174
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	89 83       	std	Y+1, r24	; 0x01
		str[1] = '\0';
     b9e:	1a 82       	std	Y+2, r1	; 0x02
		print(str); // escreve na serial o valor da string
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		if(teclado[p1][p2]==35){
     ba8:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     bac:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     bb0:	9c 01       	movw	r18, r24
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	8e 5a       	subi	r24, 0xAE	; 174
     bbc:	9e 4f       	sbci	r25, 0xFE	; 254
     bbe:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <p2>
     bc2:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <p2+0x1>
     bc6:	fc 01       	movw	r30, r24
     bc8:	e2 0f       	add	r30, r18
     bca:	f3 1f       	adc	r31, r19
     bcc:	80 81       	ld	r24, Z
     bce:	83 32       	cpi	r24, 0x23	; 35
     bd0:	21 f4       	brne	.+8      	; 0xbda <__vector_3+0x10c>
			print(" \r\n");
     bd2:	8f e9       	ldi	r24, 0x9F	; 159
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		}
		strcat(buffer,str);
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	89 e6       	ldi	r24, 0x69	; 105
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	0e 94 49 06 	call	0xc92	; 0xc92 <strcat>
		while(rd_bit(PINB,PINB1)); // para o fluxo do codigo ate que o botao seja liberado
     be8:	19 99       	sbic	0x03, 1	; 3
     bea:	fe cf       	rjmp	.-4      	; 0xbe8 <__vector_3+0x11a>
	}
	
	if (rd_bit(PINB,PINB2)){ // testa se a interrupcao foi feita no pino 2 do barramento b
     bec:	1a 9b       	sbis	0x03, 2	; 3
     bee:	3b c0       	rjmp	.+118    	; 0xc66 <__vector_3+0x198>
		p2 = 2;
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <p2+0x1>
     bf8:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <p2>
		str[0] = teclado[p1][p2]; // salva o valor da tecla na string auxiliar
     bfc:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     c00:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     c04:	fc 01       	movw	r30, r24
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	8e 0f       	add	r24, r30
     c0c:	9f 1f       	adc	r25, r31
     c0e:	fc 01       	movw	r30, r24
     c10:	ee 5a       	subi	r30, 0xAE	; 174
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
		str[1] = '\0';
     c18:	1a 82       	std	Y+2, r1	; 0x02
		print(str); // escreve na serial o valor da string
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		if(teclado[p1][p2]==35){
     c22:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <p1>
     c26:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <p1+0x1>
     c2a:	9c 01       	movw	r18, r24
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	8e 5a       	subi	r24, 0xAE	; 174
     c36:	9e 4f       	sbci	r25, 0xFE	; 254
     c38:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <p2>
     c3c:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <p2+0x1>
     c40:	fc 01       	movw	r30, r24
     c42:	e2 0f       	add	r30, r18
     c44:	f3 1f       	adc	r31, r19
     c46:	80 81       	ld	r24, Z
     c48:	83 32       	cpi	r24, 0x23	; 35
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__vector_3+0x186>
			print(" \r\n");
     c4c:	8f e9       	ldi	r24, 0x9F	; 159
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 5b 00 	call	0xb6	; 0xb6 <print>
		}
		strcat(buffer,str);
     c54:	be 01       	movw	r22, r28
     c56:	6f 5f       	subi	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	89 e6       	ldi	r24, 0x69	; 105
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	0e 94 49 06 	call	0xc92	; 0xc92 <strcat>
		while(rd_bit(PINB,PINB2)); // para o fluxo do codigo ate que o botao seja liberado
     c62:	1a 99       	sbic	0x03, 2	; 3
     c64:	fe cf       	rjmp	.-4      	; 0xc62 <__vector_3+0x194>
	}	
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <strcat>:
     c92:	fb 01       	movw	r30, r22
     c94:	dc 01       	movw	r26, r24
     c96:	0d 90       	ld	r0, X+
     c98:	00 20       	and	r0, r0
     c9a:	e9 f7       	brne	.-6      	; 0xc96 <strcat+0x4>
     c9c:	11 97       	sbiw	r26, 0x01	; 1
     c9e:	01 90       	ld	r0, Z+
     ca0:	0d 92       	st	X+, r0
     ca2:	00 20       	and	r0, r0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <strcat+0xc>
     ca6:	08 95       	ret

00000ca8 <strcmp>:
     ca8:	fb 01       	movw	r30, r22
     caa:	dc 01       	movw	r26, r24
     cac:	8d 91       	ld	r24, X+
     cae:	01 90       	ld	r0, Z+
     cb0:	80 19       	sub	r24, r0
     cb2:	01 10       	cpse	r0, r1
     cb4:	d9 f3       	breq	.-10     	; 0xcac <strcmp+0x4>
     cb6:	99 0b       	sbc	r25, r25
     cb8:	08 95       	ret

00000cba <strcpy>:
     cba:	fb 01       	movw	r30, r22
     cbc:	dc 01       	movw	r26, r24
     cbe:	01 90       	ld	r0, Z+
     cc0:	0d 92       	st	X+, r0
     cc2:	00 20       	and	r0, r0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <strcpy+0x4>
     cc6:	08 95       	ret

00000cc8 <sprintf>:
     cc8:	ae e0       	ldi	r26, 0x0E	; 14
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e6       	ldi	r30, 0x6A	; 106
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	0c 94 25 09 	jmp	0x124a	; 0x124a <__prologue_saves__+0x1c>
     cd4:	0d 89       	ldd	r16, Y+21	; 0x15
     cd6:	1e 89       	ldd	r17, Y+22	; 0x16
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	8c 83       	std	Y+4, r24	; 0x04
     cdc:	1a 83       	std	Y+2, r17	; 0x02
     cde:	09 83       	std	Y+1, r16	; 0x01
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	9f e7       	ldi	r25, 0x7F	; 127
     ce4:	9e 83       	std	Y+6, r25	; 0x06
     ce6:	8d 83       	std	Y+5, r24	; 0x05
     ce8:	ae 01       	movw	r20, r28
     cea:	47 5e       	subi	r20, 0xE7	; 231
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	6f 89       	ldd	r22, Y+23	; 0x17
     cf0:	78 8d       	ldd	r23, Y+24	; 0x18
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 86 06 	call	0xd0c	; 0xd0c <vfprintf>
     cfa:	ef 81       	ldd	r30, Y+7	; 0x07
     cfc:	f8 85       	ldd	r31, Y+8	; 0x08
     cfe:	e0 0f       	add	r30, r16
     d00:	f1 1f       	adc	r31, r17
     d02:	10 82       	st	Z, r1
     d04:	2e 96       	adiw	r28, 0x0e	; 14
     d06:	e4 e0       	ldi	r30, 0x04	; 4
     d08:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__epilogue_restores__+0x1c>

00000d0c <vfprintf>:
     d0c:	ab e0       	ldi	r26, 0x0B	; 11
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ec e8       	ldi	r30, 0x8C	; 140
     d12:	f6 e0       	ldi	r31, 0x06	; 6
     d14:	0c 94 17 09 	jmp	0x122e	; 0x122e <__prologue_saves__>
     d18:	6c 01       	movw	r12, r24
     d1a:	7b 01       	movw	r14, r22
     d1c:	8a 01       	movw	r16, r20
     d1e:	fc 01       	movw	r30, r24
     d20:	17 82       	std	Z+7, r1	; 0x07
     d22:	16 82       	std	Z+6, r1	; 0x06
     d24:	83 81       	ldd	r24, Z+3	; 0x03
     d26:	81 ff       	sbrs	r24, 1
     d28:	cc c1       	rjmp	.+920    	; 0x10c2 <vfprintf+0x3b6>
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	3c 01       	movw	r6, r24
     d30:	f6 01       	movw	r30, r12
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	f7 01       	movw	r30, r14
     d36:	93 fd       	sbrc	r25, 3
     d38:	85 91       	lpm	r24, Z+
     d3a:	93 ff       	sbrs	r25, 3
     d3c:	81 91       	ld	r24, Z+
     d3e:	7f 01       	movw	r14, r30
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <vfprintf+0x3a>
     d44:	ba c1       	rjmp	.+884    	; 0x10ba <vfprintf+0x3ae>
     d46:	85 32       	cpi	r24, 0x25	; 37
     d48:	39 f4       	brne	.+14     	; 0xd58 <vfprintf+0x4c>
     d4a:	93 fd       	sbrc	r25, 3
     d4c:	85 91       	lpm	r24, Z+
     d4e:	93 ff       	sbrs	r25, 3
     d50:	81 91       	ld	r24, Z+
     d52:	7f 01       	movw	r14, r30
     d54:	85 32       	cpi	r24, 0x25	; 37
     d56:	29 f4       	brne	.+10     	; 0xd62 <vfprintf+0x56>
     d58:	b6 01       	movw	r22, r12
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
     d60:	e7 cf       	rjmp	.-50     	; 0xd30 <vfprintf+0x24>
     d62:	91 2c       	mov	r9, r1
     d64:	21 2c       	mov	r2, r1
     d66:	31 2c       	mov	r3, r1
     d68:	ff e1       	ldi	r31, 0x1F	; 31
     d6a:	f3 15       	cp	r31, r3
     d6c:	d8 f0       	brcs	.+54     	; 0xda4 <vfprintf+0x98>
     d6e:	8b 32       	cpi	r24, 0x2B	; 43
     d70:	79 f0       	breq	.+30     	; 0xd90 <vfprintf+0x84>
     d72:	38 f4       	brcc	.+14     	; 0xd82 <vfprintf+0x76>
     d74:	80 32       	cpi	r24, 0x20	; 32
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x8a>
     d78:	83 32       	cpi	r24, 0x23	; 35
     d7a:	a1 f4       	brne	.+40     	; 0xda4 <vfprintf+0x98>
     d7c:	23 2d       	mov	r18, r3
     d7e:	20 61       	ori	r18, 0x10	; 16
     d80:	1d c0       	rjmp	.+58     	; 0xdbc <vfprintf+0xb0>
     d82:	8d 32       	cpi	r24, 0x2D	; 45
     d84:	61 f0       	breq	.+24     	; 0xd9e <vfprintf+0x92>
     d86:	80 33       	cpi	r24, 0x30	; 48
     d88:	69 f4       	brne	.+26     	; 0xda4 <vfprintf+0x98>
     d8a:	23 2d       	mov	r18, r3
     d8c:	21 60       	ori	r18, 0x01	; 1
     d8e:	16 c0       	rjmp	.+44     	; 0xdbc <vfprintf+0xb0>
     d90:	83 2d       	mov	r24, r3
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	38 2e       	mov	r3, r24
     d96:	e3 2d       	mov	r30, r3
     d98:	e4 60       	ori	r30, 0x04	; 4
     d9a:	3e 2e       	mov	r3, r30
     d9c:	2a c0       	rjmp	.+84     	; 0xdf2 <vfprintf+0xe6>
     d9e:	f3 2d       	mov	r31, r3
     da0:	f8 60       	ori	r31, 0x08	; 8
     da2:	1d c0       	rjmp	.+58     	; 0xdde <vfprintf+0xd2>
     da4:	37 fc       	sbrc	r3, 7
     da6:	2d c0       	rjmp	.+90     	; 0xe02 <vfprintf+0xf6>
     da8:	20 ed       	ldi	r18, 0xD0	; 208
     daa:	28 0f       	add	r18, r24
     dac:	2a 30       	cpi	r18, 0x0A	; 10
     dae:	40 f0       	brcs	.+16     	; 0xdc0 <vfprintf+0xb4>
     db0:	8e 32       	cpi	r24, 0x2E	; 46
     db2:	b9 f4       	brne	.+46     	; 0xde2 <vfprintf+0xd6>
     db4:	36 fc       	sbrc	r3, 6
     db6:	81 c1       	rjmp	.+770    	; 0x10ba <vfprintf+0x3ae>
     db8:	23 2d       	mov	r18, r3
     dba:	20 64       	ori	r18, 0x40	; 64
     dbc:	32 2e       	mov	r3, r18
     dbe:	19 c0       	rjmp	.+50     	; 0xdf2 <vfprintf+0xe6>
     dc0:	36 fe       	sbrs	r3, 6
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0xc4>
     dc4:	8a e0       	ldi	r24, 0x0A	; 10
     dc6:	98 9e       	mul	r9, r24
     dc8:	20 0d       	add	r18, r0
     dca:	11 24       	eor	r1, r1
     dcc:	92 2e       	mov	r9, r18
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <vfprintf+0xe6>
     dd0:	ea e0       	ldi	r30, 0x0A	; 10
     dd2:	2e 9e       	mul	r2, r30
     dd4:	20 0d       	add	r18, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	22 2e       	mov	r2, r18
     dda:	f3 2d       	mov	r31, r3
     ddc:	f0 62       	ori	r31, 0x20	; 32
     dde:	3f 2e       	mov	r3, r31
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <vfprintf+0xe6>
     de2:	8c 36       	cpi	r24, 0x6C	; 108
     de4:	21 f4       	brne	.+8      	; 0xdee <vfprintf+0xe2>
     de6:	83 2d       	mov	r24, r3
     de8:	80 68       	ori	r24, 0x80	; 128
     dea:	38 2e       	mov	r3, r24
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0xe6>
     dee:	88 36       	cpi	r24, 0x68	; 104
     df0:	41 f4       	brne	.+16     	; 0xe02 <vfprintf+0xf6>
     df2:	f7 01       	movw	r30, r14
     df4:	93 fd       	sbrc	r25, 3
     df6:	85 91       	lpm	r24, Z+
     df8:	93 ff       	sbrs	r25, 3
     dfa:	81 91       	ld	r24, Z+
     dfc:	7f 01       	movw	r14, r30
     dfe:	81 11       	cpse	r24, r1
     e00:	b3 cf       	rjmp	.-154    	; 0xd68 <vfprintf+0x5c>
     e02:	98 2f       	mov	r25, r24
     e04:	9f 7d       	andi	r25, 0xDF	; 223
     e06:	95 54       	subi	r25, 0x45	; 69
     e08:	93 30       	cpi	r25, 0x03	; 3
     e0a:	28 f4       	brcc	.+10     	; 0xe16 <vfprintf+0x10a>
     e0c:	0c 5f       	subi	r16, 0xFC	; 252
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	9f e3       	ldi	r25, 0x3F	; 63
     e12:	99 83       	std	Y+1, r25	; 0x01
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x124>
     e16:	83 36       	cpi	r24, 0x63	; 99
     e18:	31 f0       	breq	.+12     	; 0xe26 <vfprintf+0x11a>
     e1a:	83 37       	cpi	r24, 0x73	; 115
     e1c:	71 f0       	breq	.+28     	; 0xe3a <vfprintf+0x12e>
     e1e:	83 35       	cpi	r24, 0x53	; 83
     e20:	09 f0       	breq	.+2      	; 0xe24 <vfprintf+0x118>
     e22:	59 c0       	rjmp	.+178    	; 0xed6 <vfprintf+0x1ca>
     e24:	21 c0       	rjmp	.+66     	; 0xe68 <vfprintf+0x15c>
     e26:	f8 01       	movw	r30, r16
     e28:	80 81       	ld	r24, Z
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	0e 5f       	subi	r16, 0xFE	; 254
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	88 24       	eor	r8, r8
     e32:	83 94       	inc	r8
     e34:	91 2c       	mov	r9, r1
     e36:	53 01       	movw	r10, r6
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <vfprintf+0x154>
     e3a:	28 01       	movw	r4, r16
     e3c:	f2 e0       	ldi	r31, 0x02	; 2
     e3e:	4f 0e       	add	r4, r31
     e40:	51 1c       	adc	r5, r1
     e42:	f8 01       	movw	r30, r16
     e44:	a0 80       	ld	r10, Z
     e46:	b1 80       	ldd	r11, Z+1	; 0x01
     e48:	36 fe       	sbrs	r3, 6
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <vfprintf+0x146>
     e4c:	69 2d       	mov	r22, r9
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <vfprintf+0x14a>
     e52:	6f ef       	ldi	r22, 0xFF	; 255
     e54:	7f ef       	ldi	r23, 0xFF	; 255
     e56:	c5 01       	movw	r24, r10
     e58:	0e 94 72 08 	call	0x10e4	; 0x10e4 <strnlen>
     e5c:	4c 01       	movw	r8, r24
     e5e:	82 01       	movw	r16, r4
     e60:	f3 2d       	mov	r31, r3
     e62:	ff 77       	andi	r31, 0x7F	; 127
     e64:	3f 2e       	mov	r3, r31
     e66:	16 c0       	rjmp	.+44     	; 0xe94 <vfprintf+0x188>
     e68:	28 01       	movw	r4, r16
     e6a:	22 e0       	ldi	r18, 0x02	; 2
     e6c:	42 0e       	add	r4, r18
     e6e:	51 1c       	adc	r5, r1
     e70:	f8 01       	movw	r30, r16
     e72:	a0 80       	ld	r10, Z
     e74:	b1 80       	ldd	r11, Z+1	; 0x01
     e76:	36 fe       	sbrs	r3, 6
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <vfprintf+0x174>
     e7a:	69 2d       	mov	r22, r9
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <vfprintf+0x178>
     e80:	6f ef       	ldi	r22, 0xFF	; 255
     e82:	7f ef       	ldi	r23, 0xFF	; 255
     e84:	c5 01       	movw	r24, r10
     e86:	0e 94 67 08 	call	0x10ce	; 0x10ce <strnlen_P>
     e8a:	4c 01       	movw	r8, r24
     e8c:	f3 2d       	mov	r31, r3
     e8e:	f0 68       	ori	r31, 0x80	; 128
     e90:	3f 2e       	mov	r3, r31
     e92:	82 01       	movw	r16, r4
     e94:	33 fc       	sbrc	r3, 3
     e96:	1b c0       	rjmp	.+54     	; 0xece <vfprintf+0x1c2>
     e98:	82 2d       	mov	r24, r2
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	88 16       	cp	r8, r24
     e9e:	99 06       	cpc	r9, r25
     ea0:	b0 f4       	brcc	.+44     	; 0xece <vfprintf+0x1c2>
     ea2:	b6 01       	movw	r22, r12
     ea4:	80 e2       	ldi	r24, 0x20	; 32
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
     eac:	2a 94       	dec	r2
     eae:	f4 cf       	rjmp	.-24     	; 0xe98 <vfprintf+0x18c>
     eb0:	f5 01       	movw	r30, r10
     eb2:	37 fc       	sbrc	r3, 7
     eb4:	85 91       	lpm	r24, Z+
     eb6:	37 fe       	sbrs	r3, 7
     eb8:	81 91       	ld	r24, Z+
     eba:	5f 01       	movw	r10, r30
     ebc:	b6 01       	movw	r22, r12
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
     ec4:	21 10       	cpse	r2, r1
     ec6:	2a 94       	dec	r2
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	82 1a       	sub	r8, r18
     ecc:	91 08       	sbc	r9, r1
     ece:	81 14       	cp	r8, r1
     ed0:	91 04       	cpc	r9, r1
     ed2:	71 f7       	brne	.-36     	; 0xeb0 <vfprintf+0x1a4>
     ed4:	e8 c0       	rjmp	.+464    	; 0x10a6 <vfprintf+0x39a>
     ed6:	84 36       	cpi	r24, 0x64	; 100
     ed8:	11 f0       	breq	.+4      	; 0xede <vfprintf+0x1d2>
     eda:	89 36       	cpi	r24, 0x69	; 105
     edc:	41 f5       	brne	.+80     	; 0xf2e <vfprintf+0x222>
     ede:	f8 01       	movw	r30, r16
     ee0:	37 fe       	sbrs	r3, 7
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x1e6>
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	0c 5f       	subi	r16, 0xFC	; 252
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <vfprintf+0x1f6>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	07 2e       	mov	r0, r23
     ef8:	00 0c       	add	r0, r0
     efa:	88 0b       	sbc	r24, r24
     efc:	99 0b       	sbc	r25, r25
     efe:	0e 5f       	subi	r16, 0xFE	; 254
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	f3 2d       	mov	r31, r3
     f04:	ff 76       	andi	r31, 0x6F	; 111
     f06:	3f 2e       	mov	r3, r31
     f08:	97 ff       	sbrs	r25, 7
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <vfprintf+0x212>
     f0c:	90 95       	com	r25
     f0e:	80 95       	com	r24
     f10:	70 95       	com	r23
     f12:	61 95       	neg	r22
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	8f 4f       	sbci	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	f0 68       	ori	r31, 0x80	; 128
     f1c:	3f 2e       	mov	r3, r31
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	a3 01       	movw	r20, r6
     f24:	0e 94 b9 08 	call	0x1172	; 0x1172 <__ultoa_invert>
     f28:	88 2e       	mov	r8, r24
     f2a:	86 18       	sub	r8, r6
     f2c:	45 c0       	rjmp	.+138    	; 0xfb8 <vfprintf+0x2ac>
     f2e:	85 37       	cpi	r24, 0x75	; 117
     f30:	31 f4       	brne	.+12     	; 0xf3e <vfprintf+0x232>
     f32:	23 2d       	mov	r18, r3
     f34:	2f 7e       	andi	r18, 0xEF	; 239
     f36:	b2 2e       	mov	r11, r18
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	25 c0       	rjmp	.+74     	; 0xf88 <vfprintf+0x27c>
     f3e:	93 2d       	mov	r25, r3
     f40:	99 7f       	andi	r25, 0xF9	; 249
     f42:	b9 2e       	mov	r11, r25
     f44:	8f 36       	cpi	r24, 0x6F	; 111
     f46:	c1 f0       	breq	.+48     	; 0xf78 <vfprintf+0x26c>
     f48:	18 f4       	brcc	.+6      	; 0xf50 <vfprintf+0x244>
     f4a:	88 35       	cpi	r24, 0x58	; 88
     f4c:	79 f0       	breq	.+30     	; 0xf6c <vfprintf+0x260>
     f4e:	b5 c0       	rjmp	.+362    	; 0x10ba <vfprintf+0x3ae>
     f50:	80 37       	cpi	r24, 0x70	; 112
     f52:	19 f0       	breq	.+6      	; 0xf5a <vfprintf+0x24e>
     f54:	88 37       	cpi	r24, 0x78	; 120
     f56:	21 f0       	breq	.+8      	; 0xf60 <vfprintf+0x254>
     f58:	b0 c0       	rjmp	.+352    	; 0x10ba <vfprintf+0x3ae>
     f5a:	e9 2f       	mov	r30, r25
     f5c:	e0 61       	ori	r30, 0x10	; 16
     f5e:	be 2e       	mov	r11, r30
     f60:	b4 fe       	sbrs	r11, 4
     f62:	0d c0       	rjmp	.+26     	; 0xf7e <vfprintf+0x272>
     f64:	fb 2d       	mov	r31, r11
     f66:	f4 60       	ori	r31, 0x04	; 4
     f68:	bf 2e       	mov	r11, r31
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <vfprintf+0x272>
     f6c:	34 fe       	sbrs	r3, 4
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <vfprintf+0x278>
     f70:	29 2f       	mov	r18, r25
     f72:	26 60       	ori	r18, 0x06	; 6
     f74:	b2 2e       	mov	r11, r18
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0x278>
     f78:	28 e0       	ldi	r18, 0x08	; 8
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <vfprintf+0x27c>
     f7e:	20 e1       	ldi	r18, 0x10	; 16
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <vfprintf+0x27c>
     f84:	20 e1       	ldi	r18, 0x10	; 16
     f86:	32 e0       	ldi	r19, 0x02	; 2
     f88:	f8 01       	movw	r30, r16
     f8a:	b7 fe       	sbrs	r11, 7
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <vfprintf+0x290>
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	0c 5f       	subi	r16, 0xFC	; 252
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0x29c>
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 5f       	subi	r16, 0xFE	; 254
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	a3 01       	movw	r20, r6
     faa:	0e 94 b9 08 	call	0x1172	; 0x1172 <__ultoa_invert>
     fae:	88 2e       	mov	r8, r24
     fb0:	86 18       	sub	r8, r6
     fb2:	fb 2d       	mov	r31, r11
     fb4:	ff 77       	andi	r31, 0x7F	; 127
     fb6:	3f 2e       	mov	r3, r31
     fb8:	36 fe       	sbrs	r3, 6
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <vfprintf+0x2ca>
     fbc:	23 2d       	mov	r18, r3
     fbe:	2e 7f       	andi	r18, 0xFE	; 254
     fc0:	a2 2e       	mov	r10, r18
     fc2:	89 14       	cp	r8, r9
     fc4:	58 f4       	brcc	.+22     	; 0xfdc <vfprintf+0x2d0>
     fc6:	34 fe       	sbrs	r3, 4
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <vfprintf+0x2d4>
     fca:	32 fc       	sbrc	r3, 2
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x2d4>
     fce:	83 2d       	mov	r24, r3
     fd0:	8e 7e       	andi	r24, 0xEE	; 238
     fd2:	a8 2e       	mov	r10, r24
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <vfprintf+0x2d4>
     fd6:	b8 2c       	mov	r11, r8
     fd8:	a3 2c       	mov	r10, r3
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x2d6>
     fdc:	b8 2c       	mov	r11, r8
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <vfprintf+0x2d6>
     fe0:	b9 2c       	mov	r11, r9
     fe2:	a4 fe       	sbrs	r10, 4
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <vfprintf+0x2f8>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e8 0d       	add	r30, r8
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	80 33       	cpi	r24, 0x30	; 48
     ff0:	21 f4       	brne	.+8      	; 0xffa <vfprintf+0x2ee>
     ff2:	9a 2d       	mov	r25, r10
     ff4:	99 7e       	andi	r25, 0xE9	; 233
     ff6:	a9 2e       	mov	r10, r25
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <vfprintf+0x300>
     ffa:	a2 fe       	sbrs	r10, 2
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <vfprintf+0x2fe>
     ffe:	b3 94       	inc	r11
    1000:	b3 94       	inc	r11
    1002:	04 c0       	rjmp	.+8      	; 0x100c <vfprintf+0x300>
    1004:	8a 2d       	mov	r24, r10
    1006:	86 78       	andi	r24, 0x86	; 134
    1008:	09 f0       	breq	.+2      	; 0x100c <vfprintf+0x300>
    100a:	b3 94       	inc	r11
    100c:	a3 fc       	sbrc	r10, 3
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <vfprintf+0x326>
    1010:	a0 fe       	sbrs	r10, 0
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <vfprintf+0x314>
    1014:	b2 14       	cp	r11, r2
    1016:	88 f4       	brcc	.+34     	; 0x103a <vfprintf+0x32e>
    1018:	28 0c       	add	r2, r8
    101a:	92 2c       	mov	r9, r2
    101c:	9b 18       	sub	r9, r11
    101e:	0e c0       	rjmp	.+28     	; 0x103c <vfprintf+0x330>
    1020:	b2 14       	cp	r11, r2
    1022:	60 f4       	brcc	.+24     	; 0x103c <vfprintf+0x330>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    102e:	b3 94       	inc	r11
    1030:	f7 cf       	rjmp	.-18     	; 0x1020 <vfprintf+0x314>
    1032:	b2 14       	cp	r11, r2
    1034:	18 f4       	brcc	.+6      	; 0x103c <vfprintf+0x330>
    1036:	2b 18       	sub	r2, r11
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0x332>
    103a:	98 2c       	mov	r9, r8
    103c:	21 2c       	mov	r2, r1
    103e:	a4 fe       	sbrs	r10, 4
    1040:	10 c0       	rjmp	.+32     	; 0x1062 <vfprintf+0x356>
    1042:	b6 01       	movw	r22, r12
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    104c:	a2 fe       	sbrs	r10, 2
    104e:	17 c0       	rjmp	.+46     	; 0x107e <vfprintf+0x372>
    1050:	a1 fc       	sbrc	r10, 1
    1052:	03 c0       	rjmp	.+6      	; 0x105a <vfprintf+0x34e>
    1054:	88 e7       	ldi	r24, 0x78	; 120
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <vfprintf+0x352>
    105a:	88 e5       	ldi	r24, 0x58	; 88
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	b6 01       	movw	r22, r12
    1060:	0c c0       	rjmp	.+24     	; 0x107a <vfprintf+0x36e>
    1062:	8a 2d       	mov	r24, r10
    1064:	86 78       	andi	r24, 0x86	; 134
    1066:	59 f0       	breq	.+22     	; 0x107e <vfprintf+0x372>
    1068:	a1 fe       	sbrs	r10, 1
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x364>
    106c:	8b e2       	ldi	r24, 0x2B	; 43
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <vfprintf+0x366>
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	a7 fc       	sbrc	r10, 7
    1074:	8d e2       	ldi	r24, 0x2D	; 45
    1076:	b6 01       	movw	r22, r12
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    107e:	89 14       	cp	r8, r9
    1080:	38 f4       	brcc	.+14     	; 0x1090 <vfprintf+0x384>
    1082:	b6 01       	movw	r22, r12
    1084:	80 e3       	ldi	r24, 0x30	; 48
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    108c:	9a 94       	dec	r9
    108e:	f7 cf       	rjmp	.-18     	; 0x107e <vfprintf+0x372>
    1090:	8a 94       	dec	r8
    1092:	f3 01       	movw	r30, r6
    1094:	e8 0d       	add	r30, r8
    1096:	f1 1d       	adc	r31, r1
    1098:	80 81       	ld	r24, Z
    109a:	b6 01       	movw	r22, r12
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    10a2:	81 10       	cpse	r8, r1
    10a4:	f5 cf       	rjmp	.-22     	; 0x1090 <vfprintf+0x384>
    10a6:	22 20       	and	r2, r2
    10a8:	09 f4       	brne	.+2      	; 0x10ac <vfprintf+0x3a0>
    10aa:	42 ce       	rjmp	.-892    	; 0xd30 <vfprintf+0x24>
    10ac:	b6 01       	movw	r22, r12
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <fputc>
    10b6:	2a 94       	dec	r2
    10b8:	f6 cf       	rjmp	.-20     	; 0x10a6 <vfprintf+0x39a>
    10ba:	f6 01       	movw	r30, r12
    10bc:	86 81       	ldd	r24, Z+6	; 0x06
    10be:	97 81       	ldd	r25, Z+7	; 0x07
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x3ba>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	2b 96       	adiw	r28, 0x0b	; 11
    10c8:	e2 e1       	ldi	r30, 0x12	; 18
    10ca:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__epilogue_restores__>

000010ce <strnlen_P>:
    10ce:	fc 01       	movw	r30, r24
    10d0:	05 90       	lpm	r0, Z+
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	70 40       	sbci	r23, 0x00	; 0
    10d6:	01 10       	cpse	r0, r1
    10d8:	d8 f7       	brcc	.-10     	; 0x10d0 <strnlen_P+0x2>
    10da:	80 95       	com	r24
    10dc:	90 95       	com	r25
    10de:	8e 0f       	add	r24, r30
    10e0:	9f 1f       	adc	r25, r31
    10e2:	08 95       	ret

000010e4 <strnlen>:
    10e4:	fc 01       	movw	r30, r24
    10e6:	61 50       	subi	r22, 0x01	; 1
    10e8:	70 40       	sbci	r23, 0x00	; 0
    10ea:	01 90       	ld	r0, Z+
    10ec:	01 10       	cpse	r0, r1
    10ee:	d8 f7       	brcc	.-10     	; 0x10e6 <strnlen+0x2>
    10f0:	80 95       	com	r24
    10f2:	90 95       	com	r25
    10f4:	8e 0f       	add	r24, r30
    10f6:	9f 1f       	adc	r25, r31
    10f8:	08 95       	ret

000010fa <fputc>:
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	fb 01       	movw	r30, r22
    1104:	23 81       	ldd	r18, Z+3	; 0x03
    1106:	21 fd       	sbrc	r18, 1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <fputc+0x16>
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	9f ef       	ldi	r25, 0xFF	; 255
    110e:	2c c0       	rjmp	.+88     	; 0x1168 <fputc+0x6e>
    1110:	22 ff       	sbrs	r18, 2
    1112:	16 c0       	rjmp	.+44     	; 0x1140 <fputc+0x46>
    1114:	46 81       	ldd	r20, Z+6	; 0x06
    1116:	57 81       	ldd	r21, Z+7	; 0x07
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	42 17       	cp	r20, r18
    111e:	53 07       	cpc	r21, r19
    1120:	44 f4       	brge	.+16     	; 0x1132 <fputc+0x38>
    1122:	a0 81       	ld	r26, Z
    1124:	b1 81       	ldd	r27, Z+1	; 0x01
    1126:	9d 01       	movw	r18, r26
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	31 83       	std	Z+1, r19	; 0x01
    112e:	20 83       	st	Z, r18
    1130:	8c 93       	st	X, r24
    1132:	26 81       	ldd	r18, Z+6	; 0x06
    1134:	37 81       	ldd	r19, Z+7	; 0x07
    1136:	2f 5f       	subi	r18, 0xFF	; 255
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	37 83       	std	Z+7, r19	; 0x07
    113c:	26 83       	std	Z+6, r18	; 0x06
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <fputc+0x6e>
    1140:	8b 01       	movw	r16, r22
    1142:	ec 01       	movw	r28, r24
    1144:	fb 01       	movw	r30, r22
    1146:	00 84       	ldd	r0, Z+8	; 0x08
    1148:	f1 85       	ldd	r31, Z+9	; 0x09
    114a:	e0 2d       	mov	r30, r0
    114c:	09 95       	icall
    114e:	89 2b       	or	r24, r25
    1150:	e1 f6       	brne	.-72     	; 0x110a <fputc+0x10>
    1152:	d8 01       	movw	r26, r16
    1154:	16 96       	adiw	r26, 0x06	; 6
    1156:	8d 91       	ld	r24, X+
    1158:	9c 91       	ld	r25, X
    115a:	17 97       	sbiw	r26, 0x07	; 7
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	17 96       	adiw	r26, 0x07	; 7
    1160:	9c 93       	st	X, r25
    1162:	8e 93       	st	-X, r24
    1164:	16 97       	sbiw	r26, 0x06	; 6
    1166:	ce 01       	movw	r24, r28
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <__ultoa_invert>:
    1172:	fa 01       	movw	r30, r20
    1174:	aa 27       	eor	r26, r26
    1176:	28 30       	cpi	r18, 0x08	; 8
    1178:	51 f1       	breq	.+84     	; 0x11ce <__ultoa_invert+0x5c>
    117a:	20 31       	cpi	r18, 0x10	; 16
    117c:	81 f1       	breq	.+96     	; 0x11de <__ultoa_invert+0x6c>
    117e:	e8 94       	clt
    1180:	6f 93       	push	r22
    1182:	6e 7f       	andi	r22, 0xFE	; 254
    1184:	6e 5f       	subi	r22, 0xFE	; 254
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	af 4f       	sbci	r26, 0xFF	; 255
    118e:	b1 e0       	ldi	r27, 0x01	; 1
    1190:	3e d0       	rcall	.+124    	; 0x120e <__ultoa_invert+0x9c>
    1192:	b4 e0       	ldi	r27, 0x04	; 4
    1194:	3c d0       	rcall	.+120    	; 0x120e <__ultoa_invert+0x9c>
    1196:	67 0f       	add	r22, r23
    1198:	78 1f       	adc	r23, r24
    119a:	89 1f       	adc	r24, r25
    119c:	9a 1f       	adc	r25, r26
    119e:	a1 1d       	adc	r26, r1
    11a0:	68 0f       	add	r22, r24
    11a2:	79 1f       	adc	r23, r25
    11a4:	8a 1f       	adc	r24, r26
    11a6:	91 1d       	adc	r25, r1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	6a 0f       	add	r22, r26
    11ac:	71 1d       	adc	r23, r1
    11ae:	81 1d       	adc	r24, r1
    11b0:	91 1d       	adc	r25, r1
    11b2:	a1 1d       	adc	r26, r1
    11b4:	20 d0       	rcall	.+64     	; 0x11f6 <__ultoa_invert+0x84>
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__ultoa_invert+0x48>
    11b8:	68 94       	set
    11ba:	3f 91       	pop	r19
    11bc:	2a e0       	ldi	r18, 0x0A	; 10
    11be:	26 9f       	mul	r18, r22
    11c0:	11 24       	eor	r1, r1
    11c2:	30 19       	sub	r19, r0
    11c4:	30 5d       	subi	r19, 0xD0	; 208
    11c6:	31 93       	st	Z+, r19
    11c8:	de f6       	brtc	.-74     	; 0x1180 <__ultoa_invert+0xe>
    11ca:	cf 01       	movw	r24, r30
    11cc:	08 95       	ret
    11ce:	46 2f       	mov	r20, r22
    11d0:	47 70       	andi	r20, 0x07	; 7
    11d2:	40 5d       	subi	r20, 0xD0	; 208
    11d4:	41 93       	st	Z+, r20
    11d6:	b3 e0       	ldi	r27, 0x03	; 3
    11d8:	0f d0       	rcall	.+30     	; 0x11f8 <__ultoa_invert+0x86>
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__ultoa_invert+0x5c>
    11dc:	f6 cf       	rjmp	.-20     	; 0x11ca <__ultoa_invert+0x58>
    11de:	46 2f       	mov	r20, r22
    11e0:	4f 70       	andi	r20, 0x0F	; 15
    11e2:	40 5d       	subi	r20, 0xD0	; 208
    11e4:	4a 33       	cpi	r20, 0x3A	; 58
    11e6:	18 f0       	brcs	.+6      	; 0x11ee <__ultoa_invert+0x7c>
    11e8:	49 5d       	subi	r20, 0xD9	; 217
    11ea:	31 fd       	sbrc	r19, 1
    11ec:	40 52       	subi	r20, 0x20	; 32
    11ee:	41 93       	st	Z+, r20
    11f0:	02 d0       	rcall	.+4      	; 0x11f6 <__ultoa_invert+0x84>
    11f2:	a9 f7       	brne	.-22     	; 0x11de <__ultoa_invert+0x6c>
    11f4:	ea cf       	rjmp	.-44     	; 0x11ca <__ultoa_invert+0x58>
    11f6:	b4 e0       	ldi	r27, 0x04	; 4
    11f8:	a6 95       	lsr	r26
    11fa:	97 95       	ror	r25
    11fc:	87 95       	ror	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	ba 95       	dec	r27
    1204:	c9 f7       	brne	.-14     	; 0x11f8 <__ultoa_invert+0x86>
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	61 05       	cpc	r22, r1
    120a:	71 05       	cpc	r23, r1
    120c:	08 95       	ret
    120e:	9b 01       	movw	r18, r22
    1210:	ac 01       	movw	r20, r24
    1212:	0a 2e       	mov	r0, r26
    1214:	06 94       	lsr	r0
    1216:	57 95       	ror	r21
    1218:	47 95       	ror	r20
    121a:	37 95       	ror	r19
    121c:	27 95       	ror	r18
    121e:	ba 95       	dec	r27
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__ultoa_invert+0xa2>
    1222:	62 0f       	add	r22, r18
    1224:	73 1f       	adc	r23, r19
    1226:	84 1f       	adc	r24, r20
    1228:	95 1f       	adc	r25, r21
    122a:	a0 1d       	adc	r26, r0
    122c:	08 95       	ret

0000122e <__prologue_saves__>:
    122e:	2f 92       	push	r2
    1230:	3f 92       	push	r3
    1232:	4f 92       	push	r4
    1234:	5f 92       	push	r5
    1236:	6f 92       	push	r6
    1238:	7f 92       	push	r7
    123a:	8f 92       	push	r8
    123c:	9f 92       	push	r9
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	ca 1b       	sub	r28, r26
    1258:	db 0b       	sbc	r29, r27
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	09 94       	ijmp

00001266 <__epilogue_restores__>:
    1266:	2a 88       	ldd	r2, Y+18	; 0x12
    1268:	39 88       	ldd	r3, Y+17	; 0x11
    126a:	48 88       	ldd	r4, Y+16	; 0x10
    126c:	5f 84       	ldd	r5, Y+15	; 0x0f
    126e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1270:	7d 84       	ldd	r7, Y+13	; 0x0d
    1272:	8c 84       	ldd	r8, Y+12	; 0x0c
    1274:	9b 84       	ldd	r9, Y+11	; 0x0b
    1276:	aa 84       	ldd	r10, Y+10	; 0x0a
    1278:	b9 84       	ldd	r11, Y+9	; 0x09
    127a:	c8 84       	ldd	r12, Y+8	; 0x08
    127c:	df 80       	ldd	r13, Y+7	; 0x07
    127e:	ee 80       	ldd	r14, Y+6	; 0x06
    1280:	fd 80       	ldd	r15, Y+5	; 0x05
    1282:	0c 81       	ldd	r16, Y+4	; 0x04
    1284:	1b 81       	ldd	r17, Y+3	; 0x03
    1286:	aa 81       	ldd	r26, Y+2	; 0x02
    1288:	b9 81       	ldd	r27, Y+1	; 0x01
    128a:	ce 0f       	add	r28, r30
    128c:	d1 1d       	adc	r29, r1
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	ed 01       	movw	r28, r26
    129a:	08 95       	ret

0000129c <_exit>:
    129c:	f8 94       	cli

0000129e <__stop_program>:
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stop_program>
