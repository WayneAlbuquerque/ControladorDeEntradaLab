
ControleDeEntrada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080018a  0080018a  00000458  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a93  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ed  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dc  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e8       	ldi	r26, 0x8A	; 138
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  9e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TestaSenha>:
enum Estados {Aguarda, Liberacao, Configuracao}; //Estados do sistema
char senhas[7][10] = {"111111","222222","333333","444444","555555","666666"}; // Senha do sistema
char buffer[6] = ""; // Buffer para captura da senha digitada
int i = 0, liberacao = 0, Est = 0;

int TestaSenha(char senha[6]){ //Funcao para comparar a senha digitada com o banco de senhas
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	8c 01       	movw	r16, r24
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	d1 e0       	ldi	r29, 0x01	; 1
  b8:	0f 2e       	mov	r0, r31
  ba:	f4 e6       	ldi	r31, 0x64	; 100
  bc:	ef 2e       	mov	r14, r31
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	ff 2e       	mov	r15, r31
  c2:	f0 2d       	mov	r31, r0
	for(int c = 0; c < 10; c++){ 
		if(strcmp(senha,senhas[c])==0 || strcmp(senha,"master") == 0 ){	// Testa se a senha digitada e a senha mestre ou uma do banco de senhas		
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 92 01 	call	0x324	; 0x324 <strcmp>
  cc:	89 2b       	or	r24, r25
  ce:	41 f0       	breq	.+16     	; 0xe0 <TestaSenha+0x3a>
  d0:	66 e4       	ldi	r22, 0x46	; 70
  d2:	71 e0       	ldi	r23, 0x01	; 1
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 92 01 	call	0x324	; 0x324 <strcmp>
  da:	89 2b       	or	r24, r25
  dc:	59 f4       	brne	.+22     	; 0xf4 <TestaSenha+0x4e>
  de:	11 c0       	rjmp	.+34     	; 0x102 <TestaSenha+0x5c>
			if(strcmp(senha,"master") == 0){ // Testa se e a senha mestre
  e0:	66 e4       	ldi	r22, 0x46	; 70
  e2:	71 e0       	ldi	r23, 0x01	; 1
  e4:	c8 01       	movw	r24, r16
  e6:	0e 94 92 01 	call	0x324	; 0x324 <strcmp>
  ea:	89 2b       	or	r24, r25
  ec:	69 f0       	breq	.+26     	; 0x108 <TestaSenha+0x62>
				return 2; 
			}else{
				return 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0c c0       	rjmp	.+24     	; 0x10c <TestaSenha+0x66>
  f4:	2a 96       	adiw	r28, 0x0a	; 10
char senhas[7][10] = {"111111","222222","333333","444444","555555","666666"}; // Senha do sistema
char buffer[6] = ""; // Buffer para captura da senha digitada
int i = 0, liberacao = 0, Est = 0;

int TestaSenha(char senha[6]){ //Funcao para comparar a senha digitada com o banco de senhas
	for(int c = 0; c < 10; c++){ 
  f6:	ce 15       	cp	r28, r14
  f8:	df 05       	cpc	r29, r15
  fa:	21 f7       	brne	.-56     	; 0xc4 <TestaSenha+0x1e>
			}else{
				return 1;
			}
		}
	}
	return 0;	
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	05 c0       	rjmp	.+10     	; 0x10c <TestaSenha+0x66>

int TestaSenha(char senha[6]){ //Funcao para comparar a senha digitada com o banco de senhas
	for(int c = 0; c < 10; c++){ 
		if(strcmp(senha,senhas[c])==0 || strcmp(senha,"master") == 0 ){	// Testa se a senha digitada e a senha mestre ou uma do banco de senhas		
			if(strcmp(senha,"master") == 0){ // Testa se e a senha mestre
				return 2; 
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <TestaSenha+0x66>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
				return 1;
			}
		}
	}
	return 0;	
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	08 95       	ret

0000011a <USART_Transmit>:

void USART_Transmit( unsigned char data ) // transmite um caracter para o serial do Atmega328p
{
	while ( !(UCSR0A & (1<<UDRE0)));
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <USART_Transmit+0x4>
	UDR0 = data;	
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 128:	08 95       	ret

0000012a <MensagemInicial>:
}

void MensagemInicial(){ // Escreve mensagens
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	ec 97       	sbiw	r28, 0x3c	; 60
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
	char msg[] = "     BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n";
 142:	8c e3       	ldi	r24, 0x3C	; 60
 144:	ed e4       	ldi	r30, 0x4D	; 77
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	de 01       	movw	r26, r28
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	01 90       	ld	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	8a 95       	dec	r24
 152:	e1 f7       	brne	.-8      	; 0x14c <MensagemInicial+0x22>
	while(i != strlen(msg)){	
 154:	8e 01       	movw	r16, r28
 156:	0f 5f       	subi	r16, 0xFF	; 255
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	0d c0       	rjmp	.+26     	; 0x176 <MensagemInicial+0x4c>
		USART_Transmit(msg[i++]);
 15c:	9c 01       	movw	r18, r24
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <i+0x1>
 166:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <i>
 16a:	f8 01       	movw	r30, r16
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	80 81       	ld	r24, Z
 172:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_Transmit>
	UDR0 = data;	
}

void MensagemInicial(){ // Escreve mensagens
	char msg[] = "     BEM VINDO \r\n ESTE E O LAB DGT2 \r\n DIGITE SUA SENHA! \r\n";
	while(i != strlen(msg)){	
 176:	f8 01       	movw	r30, r16
 178:	01 90       	ld	r0, Z+
 17a:	00 20       	and	r0, r0
 17c:	e9 f7       	brne	.-6      	; 0x178 <MensagemInicial+0x4e>
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	e0 1b       	sub	r30, r16
 182:	f1 0b       	sbc	r31, r17
 184:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <i>
 188:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <i+0x1>
 18c:	e8 17       	cp	r30, r24
 18e:	f9 07       	cpc	r31, r25
 190:	29 f7       	brne	.-54     	; 0x15c <MensagemInicial+0x32>
		USART_Transmit(msg[i++]);
	}
}
 192:	ec 96       	adiw	r28, 0x3c	; 60
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <main>:

int main(void)
{
	DDRB = 0xFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 1ac:	15 b8       	out	0x05, r1	; 5
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	80 83       	st	Z, r24
	UCSR0C = (1 << USBS0) | (1 << UCSZ00) | (1 << UCSZ01);
 1b6:	8e e0       	ldi	r24, 0x0E	; 14
 1b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	UBRR0H = (BAUD_PRESCALE >> 8);
 1bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE;
 1c0:	87 e6       	ldi	r24, 0x67	; 103
 1c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXCIE0);
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	80 83       	st	Z, r24
	
	sei();
 1cc:	78 94       	sei

	MensagemInicial();
 1ce:	0e 94 95 00 	call	0x12a	; 0x12a <MensagemInicial>

	for(;;)
	{
		switch(Est){
			case Aguarda: //Aguarda senha
				if(strlen(buffer)==6){ // Testa se o buffer tem tamanho 6
 1d2:	ce e8       	ldi	r28, 0x8E	; 142
 1d4:	d1 e0       	ldi	r29, 0x01	; 1

	MensagemInicial();

	for(;;)
	{
		switch(Est){
 1d6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 1da:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <__data_end+0x1>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	a9 f0       	breq	.+42     	; 0x20e <main+0x66>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	91 05       	cpc	r25, r1
 1e8:	59 f1       	breq	.+86     	; 0x240 <main+0x98>
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	c1 f7       	brne	.-16     	; 0x1de <main+0x36>
			case Aguarda: //Aguarda senha
				if(strlen(buffer)==6){ // Testa se o buffer tem tamanho 6
 1ee:	fe 01       	movw	r30, r28
 1f0:	01 90       	ld	r0, Z+
 1f2:	00 20       	and	r0, r0
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <main+0x48>
 1f6:	e5 59       	subi	r30, 0x95	; 149
 1f8:	f1 40       	sbci	r31, 0x01	; 1
 1fa:	69 f7       	brne	.-38     	; 0x1d6 <main+0x2e>
					Est = TestaSenha(buffer); // Atribui o proximo estado do sistema
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <TestaSenha>
 202:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <__data_end+0x1>
 206:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
					strcpy(buffer,""); // Limpa o buffer
 20a:	18 82       	st	Y, r1
 20c:	e4 cf       	rjmp	.-56     	; 0x1d6 <main+0x2e>
				}
			break;
			case Liberacao:
					set_bit(PORTB, PORTB5);
 20e:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	93 ed       	ldi	r25, 0xD3	; 211
 214:	20 e3       	ldi	r18, 0x30	; 48
 216:	81 50       	subi	r24, 0x01	; 1
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	20 40       	sbci	r18, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x6e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x78>
 220:	00 00       	nop
					_delay_ms(1000);
					clr_bit(PORTB, PORTB5);
 222:	2d 98       	cbi	0x05, 5	; 5
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	93 ed       	ldi	r25, 0xD3	; 211
 228:	20 e3       	ldi	r18, 0x30	; 48
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x82>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x8c>
 234:	00 00       	nop
					_delay_ms(1000);
					Est = 0; // Retorna ao esta Aguarda
 236:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <__data_end+0x1>
 23a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>

			break;
 23e:	cb cf       	rjmp	.-106    	; 0x1d6 <main+0x2e>
			case Configuracao:
					set_bit(PORTB, PORTB5);
 240:	2d 9a       	sbi	0x05, 5	; 5
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	93 ed       	ldi	r25, 0xD3	; 211
 246:	20 e3       	ldi	r18, 0x30	; 48
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xa0>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xaa>
 252:	00 00       	nop
					_delay_ms(1000);
					clr_bit(PORTB, PORTB5);
 254:	2d 98       	cbi	0x05, 5	; 5
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	93 ed       	ldi	r25, 0xD3	; 211
 25a:	20 e3       	ldi	r18, 0x30	; 48
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	20 40       	sbci	r18, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0xb4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0xbe>
 266:	00 00       	nop
					_delay_ms(1000);
					set_bit(PORTB, PORTB5);
 268:	2d 9a       	sbi	0x05, 5	; 5
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	93 ed       	ldi	r25, 0xD3	; 211
 26e:	20 e3       	ldi	r18, 0x30	; 48
 270:	81 50       	subi	r24, 0x01	; 1
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0xc8>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xd2>
 27a:	00 00       	nop
					_delay_ms(1000);
					clr_bit(PORTB, PORTB5);
 27c:	2d 98       	cbi	0x05, 5	; 5
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	93 ed       	ldi	r25, 0xD3	; 211
 282:	20 e3       	ldi	r18, 0x30	; 48
 284:	81 50       	subi	r24, 0x01	; 1
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0xdc>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0xe6>
 28e:	00 00       	nop
					_delay_ms(1000);
					Est = 0; // Retorna ao esta Aguarda
 290:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <__data_end+0x1>
 294:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>

			break;
 298:	9e cf       	rjmp	.-196    	; 0x1d6 <main+0x2e>

0000029a <__vector_18>:
    }
	
}

ISR(USART_RX_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <__vector_18+0x28>
 2c2:	1f 92       	push	r1
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	char ReceivedByte = UDR0;
 2c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	char str[3];
	if(ReceivedByte){ // Testa se a variavel tem um valor se tem entra na condicao
 2cc:	88 23       	and	r24, r24
 2ce:	49 f0       	breq	.+18     	; 0x2e2 <__vector_18+0x48>
		str[0] = ReceivedByte; //cria uma string
 2d0:	89 83       	std	Y+1, r24	; 0x01
		str[1] = '\0';		   //com o caracter lido
 2d2:	1a 82       	std	Y+2, r1	; 0x02
		strcat(buffer,str);    // concatena str no buffer	
 2d4:	be 01       	movw	r22, r28
 2d6:	6f 5f       	subi	r22, 0xFF	; 255
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	8e e8       	ldi	r24, 0x8E	; 142
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 87 01 	call	0x30e	; 0x30e <strcat>
	}
		
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <strcat>:
 30e:	fb 01       	movw	r30, r22
 310:	dc 01       	movw	r26, r24
 312:	0d 90       	ld	r0, X+
 314:	00 20       	and	r0, r0
 316:	e9 f7       	brne	.-6      	; 0x312 <strcat+0x4>
 318:	11 97       	sbiw	r26, 0x01	; 1
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	00 20       	and	r0, r0
 320:	e1 f7       	brne	.-8      	; 0x31a <strcat+0xc>
 322:	08 95       	ret

00000324 <strcmp>:
 324:	fb 01       	movw	r30, r22
 326:	dc 01       	movw	r26, r24
 328:	8d 91       	ld	r24, X+
 32a:	01 90       	ld	r0, Z+
 32c:	80 19       	sub	r24, r0
 32e:	01 10       	cpse	r0, r1
 330:	d9 f3       	breq	.-10     	; 0x328 <strcmp+0x4>
 332:	99 0b       	sbc	r25, r25
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
